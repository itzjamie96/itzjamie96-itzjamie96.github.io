<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code with Jamie</title>
    <link>https://itzjamie96.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 18 Apr 2021 14:48:53 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Git] 팀 프로젝트에 git flow 적용해보기</title>
      <link>https://itzjamie96.github.io/2021/04/18/git-flow-tryout/</link>
      <guid>https://itzjamie96.github.io/2021/04/18/git-flow-tryout/</guid>
      <pubDate>Sun, 18 Apr 2021 13:43:46 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;그동안 나의 commit 메세지들은 [ADD], [UPDATE], [DELETE] 세 가지만 포함했다. 하지만 6인 팀 프로젝트를 진행하며 다 같이 &lt;code&gt;origin master&lt;/code&gt;를 쓰는 건 말도 안된다는 것을 알게 되었고…🤣 협업을 위한 git branch 전략이 있다는 것을 알게 되어 정리해보는 나의 git flow 적응기!&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><blockquote><p>그동안 나의 commit 메세지들은 [ADD], [UPDATE], [DELETE] 세 가지만 포함했다. 하지만 6인 팀 프로젝트를 진행하며 다 같이 <code>origin master</code>를 쓰는 건 말도 안된다는 것을 알게 되었고…🤣 협업을 위한 git branch 전략이 있다는 것을 알게 되어 정리해보는 나의 git flow 적응기!</p></blockquote><a id="more"></a><h2 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h2><p>Git Flow는 다양한 branch를 효율적으로 관리하기 위한 전략이다. Vincent Driessen<sup><a href="#Reference">1</a></sup>가 2010년에 처음 제안한 브랜치 관리 모델로, 이후 유명해져 너도나도 쓰게 되었다고 한다. 현재는 Github Flow, Gitlab Flow등 더 많은 전략들이 있다고 하지만, 오늘은 가장 기본인 <del>Git Flow</del> 전략을 살펴보도록 하자.</p><p><img src="/img/20210418/gitflow-model.png" alt="Git Flow 전략"></p><p>이게 바로 그 유명한 Git Flow 전략을 시각화한 그림이다. Git Flow에는 feature, develop, release, hotfix, master라는 총 5가지 브랜치들이 존재한다. 각 브랜치들이 어떤 역할을 하는지 살펴보자. </p><h2 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h2><p>새로운 기능을 개발하기 위해 생성되는 브랜치가 바로 feature다. 예를 들어 게시판 서비스를 개발할 때 “댓글” 기능을 추가한다면 <code>feature/comment</code>라는 브랜치를 생성한 후 해당 브랜치에서 댓글 관련 기능을 개발하면 된다. 팀 프로젝트를 진행하며 우리 팀의 경우 <code>FE/BE</code>로 브랜치를 더 세분화하기로 해서 <code>feature/comment_fe</code>, <code>feature/comment_be</code>의 형식으로 브랜치를 생성한 후 개발을 진행했다. </p><h3 id="develop"><a href="#develop" class="headerlink" title="develop"></a>develop</h3><p><code>master</code>로 최종 merge하기 전, 가장 최신의 코드들을 가지고 있는 브랜치다. “최신”이라고 하는 이유는 서비스의 신규 기능들을 우선 <code>develop</code>에서 전체적으로 합쳐보기 때문이다. 예를 들어 <code>feature</code> 브랜치에서 댓글 관련 기능을 모두 개발 완료한 후, develop 브랜치에 merge시킴으로써 전체 서비스에 댓글 기능이 잘 작동하는지 확인해보면 된다. develop 브랜치 없이 바로 master로 merge 시켰다가는 어떤 버그가 일어날지 절대 모르기 때문에 develop에서 한번 합쳐보는 과정이 필수다. 여기서는 개발이 이뤄지지 않는다. 기능에 대한 개발은 <code>feature</code>에서!</p><h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><p><code>develop</code>에 merge된 기능을 이제 출시해도 된다는 판단이 들었을 때 <code>release</code> 브랜치를 생성하게 된다. <code>master</code>로 merge하기 전의 준비 과정이라고 생각하면 된다. 혹시라도 최종 배포를 준비하던 중 버그가 발견되면 어떤 버그가 있어서 수정했는지에 대한 사항만 추가된다. 여기서도 개발은 이뤄지지 않는다!</p><h3 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h3><p>이미 배포된 서비스에서 버그를 발견했다면😨?! 재빨리 <code>hotfix</code> 브랜치를 생성한 후 버그를 잡는다 (🐛👊). 버그 수정이 완료된 후 <code>hotfix</code>는 <code>master</code>와 <code>develop</code> 모두에 merge 시킨다.  </p><h3 id="master"><a href="#master" class="headerlink" title="master"></a>master</h3><p><code>진짜_진짜_최종_final</code>. 배포해서 세상에 내놓을 <del>최종</del> 코드들을 가진 브랜치다 (최근 GitHub에서는 <code>main</code>으로 불리고 있다). 이미 개발이 완료돼서 안정적이다!고 검증된 코드들만 있게 된다 (feature-develop-release를 거쳤으니 정말 안정적이어야 할 듯). </p><h2 id="실제로-프로젝트에-적용해보기"><a href="#실제로-프로젝트에-적용해보기" class="headerlink" title="실제로 프로젝트에 적용해보기"></a>실제로 프로젝트에 적용해보기</h2><p>팀 프로젝트를 진행하며 git flow를 적용해봤다. 이를 위해서 우선 commit 메세지의 규칙을 먼저 세웠다. </p><figure class="highlight markdown"><figcaption><span>우리의 Commit Message Convention</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Feat] 새로운 기능에 대한 커밋</span><br><span class="line">[Fix] 버그 수정에 대한 커밋 </span><br><span class="line">[Build] 빌드 관련 파일 수정에 대한 커밋</span><br><span class="line">[Chore] 그 외 자잘한 수정에 대한 커밋</span><br><span class="line">[Ci] CI 관련 설정 수정에 대한 커밋</span><br><span class="line">[Docs] 도큐먼트 수정에 대한 커밋</span><br><span class="line">[Style] 코드 문법 또는 포맷에 대한 수정에 대한 커밋</span><br><span class="line">[Test] 테스트 코드 수정에 대한 커밋</span><br></pre></td></tr></tbody></table></figure><p>이 규칙은 인터넷에 검색하면 가장 쉽게 찾을 수 있는 규칙이다. 그리고 이렇게 메세지와 git flow를 적용한 결과는 아래와 같다. </p><p><img src="/img/20210418/our-gitflow.png" alt="실제 적용 사례"></p><p>보다시피 각 기능의 개발은 <code>feature</code>에서 이뤄지고, 해당 기능이 어느 정도 완료되거나 수정되면 <code>develop</code>에 merge를 시켰다. 실제 git flow를 완벽히 적용시키지는 못했지만 (ex. <code>release</code> 브랜치 생성하기) 처음 적용해보고, 이를 통해 수월한 협업이 진행됐다는 점에서 꽤 큰 배움과 성과를 얻었다고 생각한다. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://nvie.com/posts/a-successful-git-branching-model/"><sup>1</sup> A successful Git branching model</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2021/04/18/git-flow-tryout/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1213. String with Python</title>
      <link>https://itzjamie96.github.io/2021/02/12/swea-python-1213/</link>
      <guid>https://itzjamie96.github.io/2021/02/12/swea-python-1213/</guid>
      <pubDate>Fri, 12 Feb 2021 14:51:50 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14P0c6AAUCFAYi&quot;&gt;1213. String&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주어진 문자열을 기준으로 문장을 split 한다&lt;/li&gt;
&lt;li&gt;split된 리스트의 길이에서 1을 뺀게 답 (주어진 문자열의 갯수를 구해야하니까)&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14P0c6AAUCFAYi">1213. String</a></p><p><strong>접근 방법</strong></p><ul><li>주어진 문자열을 기준으로 문장을 split 한다</li><li>split된 리스트의 길이에서 1을 뺀게 답 (주어진 문자열의 갯수를 구해야하니까)</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1213</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    n = int(input())</span><br><span class="line">    find = input()</span><br><span class="line">    text = list(input().split(find))    <span class="comment">#특정 문자열을 기준으로 split한 후 </span></span><br><span class="line">    print(<span class="string">f'#<span class="subst">{n}</span> <span class="subst">{len(text)<span class="number">-1</span>}</span>'</span>)        <span class="comment">#리스트의 길이에서 1을 뺀 값이 답</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2021/02/12/swea-python-1213/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1209. Sum with Python</title>
      <link>https://itzjamie96.github.io/2021/02/10/swea-python-1209/</link>
      <guid>https://itzjamie96.github.io/2021/02/10/swea-python-1209/</guid>
      <pubDate>Wed, 10 Feb 2021 14:50:16 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV13_BWKACUCFAYh&quot;&gt;1209. Sum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가로, 세로, 대각선의 합들을 각각 구한다&lt;/li&gt;
&lt;li&gt;합들 중에서 최대값을 구한다&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV13_BWKACUCFAYh">1209. Sum</a></p><p><strong>접근 방법</strong></p><ul><li>가로, 세로, 대각선의 합들을 각각 구한다</li><li>합들 중에서 최대값을 구한다</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1209</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMaxSum</span><span class="params">(arr)</span>:</span></span><br><span class="line">    rowMax, colMax, rightDown, leftDown = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="comment"># find rowMax</span></span><br><span class="line">        <span class="keyword">if</span> sum(arr[i]) &gt; rowMax:</span><br><span class="line">            rowMax = sum(arr[i])</span><br><span class="line">        <span class="comment">#colMax</span></span><br><span class="line">        tmpCol = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">            tmpCol += arr[j][i]</span><br><span class="line">        <span class="keyword">if</span> tmpCol &gt; colMax:</span><br><span class="line">            colMax = tmpCol</span><br><span class="line">        <span class="comment"># diagonals</span></span><br><span class="line">        rightDown += arr[i][i]</span><br><span class="line">        leftDown += arr[i][<span class="number">99</span>-i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max(rowMax, colMax, rightDown, leftDown)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    N = int(input())</span><br><span class="line">    board = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">    print(<span class="string">f'#<span class="subst">{N}</span> <span class="subst">{findMaxSum(board)}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2021/02/10/swea-python-1209/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1208. Flatten with Python</title>
      <link>https://itzjamie96.github.io/2021/02/10/swea-python-1208/</link>
      <guid>https://itzjamie96.github.io/2021/02/10/swea-python-1208/</guid>
      <pubDate>Wed, 10 Feb 2021 14:28:47 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV139KOaABgCFAYh&quot;&gt;1208. Flatten&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주어진 횟수동안 max-1, min+1을 수행한다&lt;/li&gt;
&lt;li&gt;최종적으로 max-min을 리턴한다&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV139KOaABgCFAYh">1208. Flatten</a></p><p><strong>접근 방법</strong></p><ul><li>주어진 횟수동안 max-1, min+1을 수행한다</li><li>최종적으로 max-min을 리턴한다</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1208</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 직접 min, max의 인덱스를 리턴하는 함수를 짰다</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMinMax</span><span class="params">(numList)</span>:</span></span><br><span class="line">    min = max = numList[<span class="number">0</span>]</span><br><span class="line">    minIdx, maxIdx = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(numList)):</span><br><span class="line">        <span class="keyword">if</span> min &gt; numList[i]:</span><br><span class="line">            min = numList[i]</span><br><span class="line">            minIdx = i</span><br><span class="line">        <span class="keyword">if</span> max &lt; numList[i]:</span><br><span class="line">            max = numList[i]</span><br><span class="line">            maxIdx = i</span><br><span class="line">    <span class="keyword">return</span> (minIdx, maxIdx)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    dump = int(input())</span><br><span class="line">    numList = list(map(int, input().split()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 각 턴마다 max, min을 찾아서 값에서 1씩 빼줌</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(dump):</span><br><span class="line">        minIdx = findMinMax(numList)[<span class="number">0</span>]</span><br><span class="line">        maxIdx = findMinMax(numList)[<span class="number">1</span>]</span><br><span class="line">        numList[minIdx] += <span class="number">1</span></span><br><span class="line">        numList[maxIdx] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    minmax = findMinMax(numList)</span><br><span class="line">    print(<span class="string">f"#<span class="subst">{tc}</span> <span class="subst">{numList[minmax[<span class="number">1</span>]] - numList[minmax[<span class="number">0</span>]]}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2021/02/10/swea-python-1208/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1206. View with Python</title>
      <link>https://itzjamie96.github.io/2021/02/10/swea-python-1206/</link>
      <guid>https://itzjamie96.github.io/2021/02/10/swea-python-1206/</guid>
      <pubDate>Wed, 10 Feb 2021 14:22:06 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV134DPqAA8CFAYh&quot;&gt;1206. View&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 건물 양 옆으로 1, 2칸씩 떨어진 건물들의 높이를 비교한다&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV134DPqAA8CFAYh">1206. View</a></p><p><strong>접근 방법</strong></p><ul><li>각 건물 양 옆으로 1, 2칸씩 떨어진 건물들의 높이를 비교한다</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1206</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 테스트 케이스는 총 10번이다</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 입력될 건물들의 갯수</span></span><br><span class="line">    T = int(input())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 건물들을 입력받아 b(buildings) 리스트에 넣는다</span></span><br><span class="line">    b = list(map(int, input().split()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 확보된 조망권의 갯수</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 전체 리스트에서 맨 앞, 뒤 두칸은 아무것도 없기 때문에 2부터 전체 길이-2까지 for문을 돌림</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(b) - <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># i번째 건물의 양쪽다 i보다 작을 때</span></span><br><span class="line">        <span class="keyword">if</span> b[i - <span class="number">1</span>] &lt; b[i] <span class="keyword">and</span> b[i + <span class="number">1</span>] &lt; b[i]:</span><br><span class="line">            <span class="comment"># 더 작은 difference를 keep함</span></span><br><span class="line">            diff = b[i] - b[i - <span class="number">1</span>] <span class="keyword">if</span> b[i] - b[i - <span class="number">1</span>] &lt; b[i] - b[i + <span class="number">1</span>] <span class="keyword">else</span> b[i] - b[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># i번째의 양쪽다 작다면 한칸 더 옆까지 확인해야함</span></span><br><span class="line">            <span class="comment"># i번째의 두칸으로? 양옆까지 i보다 작은지 확인</span></span><br><span class="line">            <span class="keyword">if</span> b[i - <span class="number">2</span>] &lt; b[i] <span class="keyword">and</span> b[i + <span class="number">2</span>] &lt; b[i]:</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 여기서 더 작은 difference를 keep함</span></span><br><span class="line">                new_diff = b[i] - b[i - <span class="number">2</span>] <span class="keyword">if</span> b[i] - b[i - <span class="number">2</span>] &lt; b[i] - b[i + <span class="number">2</span>] <span class="keyword">else</span> b[i] - b[i + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 양 옆과 옆옆까지 비교했을 때 더 작은 difference가 조망권 확보된 칸의 갯수</span></span><br><span class="line">                <span class="comment"># result에 더해준다</span></span><br><span class="line">                <span class="keyword">if</span> new_diff &lt; diff:</span><br><span class="line">                    result += new_diff</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += diff</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 애초에 양옆의 건물들이 i번째보다 크면 패쓰</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"#<span class="subst">{n + <span class="number">1</span>}</span> <span class="subst">{result}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2021/02/10/swea-python-1206/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Java] Wrapper 클래스란? (Feat. int vs. Integer)</title>
      <link>https://itzjamie96.github.io/2021/02/07/java-what-are-wrapper-classes/</link>
      <guid>https://itzjamie96.github.io/2021/02/07/java-what-are-wrapper-classes/</guid>
      <pubDate>Sun, 07 Feb 2021 12:57:00 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;별생각 없이 &lt;code&gt;int&lt;/code&gt;를 쓰다 보니, 대체 &lt;code&gt;int&lt;/code&gt;와 &lt;code&gt;Integer&lt;/code&gt;의 차이가 뭔가 싶었다. &lt;code&gt;int&lt;/code&gt;가 &lt;code&gt;Integer&lt;/code&gt;의 약자인가?ㅎ 싶었지만 놉! Wrapper 클래스라는 개념이 있었다 (머쓱). Wrapper 클래스, 뭘 감싸는 녀석인지 알아보자!&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><blockquote><p>별생각 없이 <code>int</code>를 쓰다 보니, 대체 <code>int</code>와 <code>Integer</code>의 차이가 뭔가 싶었다. <code>int</code>가 <code>Integer</code>의 약자인가?ㅎ 싶었지만 놉! Wrapper 클래스라는 개념이 있었다 (머쓱). Wrapper 클래스, 뭘 감싸는 녀석인지 알아보자!</p></blockquote><a id="more"></a><h2 id="Java의-자료형들"><a href="#Java의-자료형들" class="headerlink" title="Java의 자료형들"></a>Java의 자료형들</h2><p>Java☕를 배우는 극 초반에 두 가지의 자료형에 대해 배우게 된다. 바로 <del>Primitive type</del>(기본형)과 <del>Reference type</del>(참조형)이다. Java에는 총 8개의 기본형이 있다:<br><code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>boolean</code>. </p><p>기본형들은 자료형과는 달리 스택에 바로 값이 저장되기 때문에 값이 저장되어 있는 공간을 찾아가야 하는 자료형보다는 연산 등에 있어서 조금 더 빠른 속도를 보여준다. 또한, 불필요한 객체가 생성되는 것은 피하는 게 좋기 때문에 <code>Object</code> 형태가 꼭 필요한 상황이 아니라면 기본형을 쓰는 것이 권장된다<sup><a href="#Reference">1</a></sup>.</p><p>하지만! 개발을 하다 보면 그냥 기본형만 쓸 수는 없는 상황이 생기기 마련이다. 이때 쓸 수 있는 게 바로 <del>Wrapper 클래스</del>다.<br><br></p><h2 id="Wrapper-클래스란"><a href="#Wrapper-클래스란" class="headerlink" title="Wrapper 클래스란?"></a>Wrapper 클래스란?</h2><p>Wrapper 클래스는 Java의 기본 자료형들을 <del>Object(객체)</del>로 만들어 주는 클래스다.  기본형을 <del>WRAP</del>, 즉 <del>감싸서</del> 해당 기본형의 객체 타입으로 만들어 주는 것이다. 치킨은 샌드위치가 아니지만 또띠아로 감싸서 치킨랩을 만들면 샌드위치가 되는 것과 비슷한다😏.<br><img src="/img/20210207/chicken_wrap.png" alt="Chicken Wrap!"></p><p>자바의 모든 8개의 기본형에 맞는 Wrapper 클래스가 존재한다.<br><img src="/img/20210207/wrappers.png" alt=""></p><h3 id="Wrapper-클래스-적용해보기"><a href="#Wrapper-클래스-적용해보기" class="headerlink" title="Wrapper 클래스 적용해보기"></a>Wrapper 클래스 적용해보기</h3><figure class="highlight java"><figcaption><span>primitive to wrapper object</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 먼저 기본 자료형을 만들어준다</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">double</span> b = <span class="number">5.65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wrapper 객체로 변환하기</span></span><br><span class="line">    Integer aObj = Integer.valueOf(a);</span><br><span class="line">    Double bObj = Double.valueOf(b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(aObj <span class="keyword">instanceof</span> Integer) {</span><br><span class="line">      System.out.println(<span class="string">"aObj는 Integer 타입 객체!"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bObj <span class="keyword">instanceof</span> Double) {</span><br><span class="line">      System.out.println(<span class="string">"bObj는 Double 타입 객체!"</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption><span>result</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aObj는 Integer 타입 객체!</span><br><span class="line">bObj는 Double 타입 객체!</span><br></pre></td></tr></tbody></table></figure><br><h2 id="그럼-언제-쓰는-걸까"><a href="#그럼-언제-쓰는-걸까" class="headerlink" title="그럼 언제 쓰는 걸까?"></a>그럼 언제 쓰는 걸까?</h2><p>Wrapper 클래스를 사용하는 이유는 다양하다. 하지만 대표적인 상황들은 다음과 같다.</p><ul><li><code>Collections</code>에 사용하기 위해서</li><li><code>null</code> 값도 받을 수 있기 위해서</li><li><code>Object</code>로써의 유용한 메소드들을 사용할 수 있기 위해서</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://dev.to/kylec32/effective-java-tuesday-avoid-creating-unnecessary-objects-4nn8"><sup>1</sup>Effective Java Tuesday! Avoid Creating Unnecessary Objects!</a><br><a href="https://www.baeldung.com/java-initialization">Baledung: A Guide to Creating Objects in Java</a><br><a href="https://stackoverflow.com/questions/3579035/why-are-there-wrapper-classes-in-java">Why are there wrapper classes in Java?</a><br><a href="https://www.programiz.com/java-programming/wrapper">Java Wrapper Class</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2021/02/07/java-what-are-wrapper-classes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Spring] Service와 ServiceImpl</title>
      <link>https://itzjamie96.github.io/2021/01/24/spring-service-and-serviceimpl/</link>
      <guid>https://itzjamie96.github.io/2021/01/24/spring-service-and-serviceimpl/</guid>
      <pubDate>Sun, 24 Jan 2021 13:06:48 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;MVC 패턴을 공부하며 항상 &lt;del&gt;Service&lt;/del&gt;를 &lt;code&gt;Service&lt;/code&gt;라는 interface와 &lt;code&gt;ServiceImpl&lt;/code&gt;이라는 class로 분리하는 이유에 대해 궁금했다. 이에 대한 해답은 우아한형제들 개발팀장 김영한님의 &lt;a href=&quot;https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8&quot;&gt;스프링 핵심 원리-기본편&lt;/a&gt; 강의를 듣다가 깨닫게 되었다(✨빛영한✨).&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><blockquote><p>MVC 패턴을 공부하며 항상 <del>Service</del>를 <code>Service</code>라는 interface와 <code>ServiceImpl</code>이라는 class로 분리하는 이유에 대해 궁금했다. 이에 대한 해답은 우아한형제들 개발팀장 김영한님의 <a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8">스프링 핵심 원리-기본편</a> 강의를 듣다가 깨닫게 되었다(✨빛영한✨).</p></blockquote><a id="more"></a><br><h2 id="객체-지향-프로그래밍-OOP"><a href="#객체-지향-프로그래밍-OOP" class="headerlink" title="객체 지향 프로그래밍 (OOP)"></a>객체 지향 프로그래밍 (OOP)</h2><p>왜 Service와 ServiceImpl로 나누어지게 됐는지 알기 위해서는, 먼저 객체 지향 프로그래밍에 대해 알아야 한다.</p><p><em>OOP(Object-Oriented Programming)는 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 <del>“객체”들의 모임</del>으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다. <br><br>객체 지향 프로그래밍은 프로그램을 <del>유연</del>하고 <del>변경이 용이</del>하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다</em><sup><a href="#Reference">1</a></sup>.</p><p>위는 위키피디아에서 소개하는 “객체 지향 프로그래밍”에 대한 설명이다. 여기서 중요한 점은 <del>유연하고 변경이 용이</del>하다는 점이다. 쉽게 말해 프로그램에서 특정 기능을 각자 다르게 구현하는 코드들 A와 B가 있을 때, A라는 코드를 사용하던, B라는 코드를 사용하던 이 기능은 구현이 되는 거니 상관이 없다는 것이다. </p><p><img src="/img/20210124/easy_code_change.png" alt=""></p><p>현실 속 예시를 들자면, 지금 사용하는 키보드를 다른 키보드로 쉽게 바꿀 수 있는 것과 동일하다. 타자를 친다는 기능은 그 어떤 키보드를 가져와도 똑같이 사용할 수 있기 때문이다. 이러한 객체 지향 프로그래밍의 특징은 <del>다형성(Polymorphism)</del> 이라는 개념이 있기 때문에 가능하다. </p><br><h2 id="다형성-feat-Service와-ServiceImpl"><a href="#다형성-feat-Service와-ServiceImpl" class="headerlink" title="다형성 (feat. Service와 ServiceImpl)"></a>다형성 (feat. Service와 ServiceImpl)</h2><p>다형성(polymorphism)이란 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미한다<sup><a href="#Reference">2</a></sup>. 자바에서는 보통 부모 클래스를 자식이 상속받아 기능을 확장하거나 변경하는 방식으로 쓴다. 이걸 오늘의 주제인 Service와 ServiceImpl에 대입해서 본다면, Service라는 부모를 ServiceImpl이라는 자식이 상속받게 되는 것이다. </p><p>근데 왜 이름들이 <del>Service</del>와 <del>ServiceImpl</del>인걸까? 그건 부모인 Service를 <code>interface</code>로 만들고, 자식인 ServiceImpl 클래스가 부모를 상속받아 <code>implement</code>하는 구현체이기 때문이다. 이렇게 직관적으로 자식 클래스의 이름을 <em>~Impl</em>로 짓는 것은 해외의 개발자들도 따르는 naming convention이다<sup><a href="#Reference">3</a></sup>. </p><p>이제 부모와 자식이라고 부르는 대신에 interface인 <code>Service</code>를 <del>역할</del>, 이걸 상속받는 자식 클래스인 <code>ServiceImpl</code>을 <del>구현</del>이라고 나눠서 생각하면 쉽게 이해할 수 있다. </p><p>방금 전에 “키보드”에 대한 예시를 들었다. 이걸 역할과 구현으로 나눠보면, “타자를 치는” 역할을 구현하기 위해 사용자는 빨간색 빛이 나는 키보드 A를 쓸 수도 있고, 무지개색 키보드 B를 쓸 수도 있다. 바꿔도 키보드의 역할에는 영향이 없다. 이걸 Service와 ServiceImpl로 생각하면 <code>KeyboardService</code>라는 interface를 <del>implement</del>하는 <code>AkeyboardServiceImpl</code>과 <code>BkeyboardServiceImpl</code> class들이 “타자를 치는” 기능을 구현하는 것이다. </p><p><img src="/img/20210124/implements.png" alt=""></p><p>이렇게 역할과 구현으로 나누게 되면 역할 부분을 새로운 방식으로 구현해야 할 때 구현하는 부분만 손쉽게 바꿀 수 있게 되기 때문에 <code>Service</code>라는 interface를 만든 후 해당 역할을 구현하는 <code>ServiceImpl</code> class를 만들게 되는 것이다! 😎</p><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D"><sup>1</sup>Wikepedia: 객체 지향 프로그래밍</a><br><a href="http://www.tcpschool.com/java/java_polymorphism_concept"><sup>2</sup>TCP School: 다형성의 개념</a><br><a href="https://softwareengineering.stackexchange.com/questions/75956/default-vs-impl-when-implementing-interfaces-in-java"><sup>3</sup>Default vs Impl when implementing interfaces in Java</a><br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8">인프런: 스프링 핵심 원리-기본편</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2021/01/24/spring-service-and-serviceimpl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Java Project] 간단한 Tic Tac Toe -1-</title>
      <link>https://itzjamie96.github.io/2021/01/10/project-java-tictactoe-1/</link>
      <guid>https://itzjamie96.github.io/2021/01/10/project-java-tictactoe-1/</guid>
      <pubDate>Sun, 10 Jan 2021 10:33:57 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;자바 공부를 다시 시작하며 프로젝트라고 부르기도 애매한🙈 아주 &lt;strong&gt;작고!!&lt;/strong&gt; 귀여운(ㅎ) tic tac toe 프로그램을 만들어봤다. 기본 문법만 호다닥 떼고 만들어서 아직 엉성한 부분도 많지만 직접 필요한 클래스와 메소드를 만들어보며 즐겁게 개발할 수 있던 프로젝트인만큼 정리해두면 좋을 것 같아서 남겨본다.&lt;br&gt;&lt;em&gt;*참고: 이 프로젝트의 명세는 HyperSkill의 Tic-Tac-Toe with AI 프로젝트를 참고했다.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><blockquote><p>자바 공부를 다시 시작하며 프로젝트라고 부르기도 애매한🙈 아주 <strong>작고!!</strong> 귀여운(ㅎ) tic tac toe 프로그램을 만들어봤다. 기본 문법만 호다닥 떼고 만들어서 아직 엉성한 부분도 많지만 직접 필요한 클래스와 메소드를 만들어보며 즐겁게 개발할 수 있던 프로젝트인만큼 정리해두면 좋을 것 같아서 남겨본다.<br><em>*참고: 이 프로젝트의 명세는 HyperSkill의 Tic-Tac-Toe with AI 프로젝트를 참고했다.</em></p></blockquote><a id="more"></a><br><p><img src="https://user-images.githubusercontent.com/53888115/104121217-eef64100-537f-11eb-9763-b61d7dd8ee13.gif?style=centerme" alt="나의 아주 작고 귀엽고 간단한 Tic Tac Toe"></p><h2 id="프로젝트-소개"><a href="#프로젝트-소개" class="headerlink" title="프로젝트 소개"></a>프로젝트 소개</h2><p>Tic Tac Toe는 오목과 비슷한 게임으로 3x3판 위에 O나 X로 표시할 수 있다. 오목처럼 가로/세로/대각선으로 연속된 똑같은 모양이 나오면 해당 모양의 플레이어가 우승을 하는 방식이다. </p><p><strong>프로젝트의 기본 규칙:</strong></p><ol><li>게임이 시작할 때와 각 플레이어가 자신의 좌표를 입력한 후 테이블을 출력한다.</li><li>플레이어(=사용자)가 X로 첫 순서를 가져간다.</li><li>플레이어는 자기 순서가 되면 가능한 좌표의 x, y 값을 한 칸 띄고 숫자로 입력한다. (ex: 1 1)</li><li>플레이어가 자신의 좌표를 입력한 다음은 항상 컴퓨터의 차례다.</li><li>게임이 끝나면 어떤 플레이어가 이겼는지 알려준다.</li></ol><h2 id="접근-방법"><a href="#접근-방법" class="headerlink" title="접근 방법"></a>접근 방법</h2><h3 id="테이블-생성"><a href="#테이블-생성" class="headerlink" title="테이블 생성"></a>테이블 생성</h3><p>파이썬으로 알고리즘을 연습하면서 기본적인 2차원 배열을 생성할 때 <code>[[0]*N for _ in range(N)]</code> 이런 식으로 간단하게 코드를 짜는 게 습관이 돼 있었는데 자바는 <del>배열의 크기를 직접 지정</del>해서 선언 후 초기화 작업을 해줘야 했기 때문에 고민하다 그냥 처음부터 <code>{0, 0, 0}</code>의 형식으로 초기화를 해줬다. </p><figure class="highlight java"><figcaption><span>initialize table</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] table = {{<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>},{<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>},{<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>}};</span><br></pre></td></tr></tbody></table></figure><p><del>int 배열로 생성한 이유</del>는 나중에 bingo(가로/세로/대각선에 연속으로 같은 값이 있는 것. 편의상 빙고라고 부를 예정)를 찾아야 하는 데 <code>O</code>나 <code>X</code>인 string 형태를 일일이 비교하는 것보다 <code>O</code>는 <code>-1</code>, <code>X</code>는 <code>1</code>로 두고 합을 찾아다니는 게 훨씬 효율적일 것이라고 생각했기 때문이다. 이 부분에 대해서는 뒤의 우승자를 찾는 <code>checkWinner()</code> 메서드를 설명할 때 더 자세히 다룰 것이다. </p><br><h3 id="테이블-출력"><a href="#테이블-출력" class="headerlink" title="테이블 출력"></a>테이블 출력</h3><p>각 플레이어의 턴이 될 때마다 테이블을 출력해 줘야한다. 게임이 언제 끝날지도 모르는 데 모든 턴마다 for문으로 테이블을 프린트하고 있을 수는 없기 때문에 <code>printTable()</code> 메서드를 만들었다. 참고로 내 테이블과 그 안의 값들은 <code>int</code>꼴이기 때문에 <code>O</code>와 <code>X</code>로 바꿔주는 과정을 거쳤다. </p><figure class="highlight java"><figcaption><span>print table</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTable</span><span class="params">(<span class="keyword">int</span>[][] table)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++){</span><br><span class="line">            System.out.print(<span class="string">"| "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (table[i][j] == <span class="number">0</span>) {</span><br><span class="line">                    System.out.print(<span class="string">" "</span>);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (table[i][j] == <span class="number">1</span>){</span><br><span class="line">                    System.out.print(<span class="string">"X"</span>);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    System.out.print(<span class="string">"O"</span>);</span><br><span class="line">                }</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"|"</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><br><h3 id="좌표-입력받기"><a href="#좌표-입력받기" class="headerlink" title="좌표 입력받기"></a>좌표 입력받기</h3><h4 id="좌표-클래스-생성"><a href="#좌표-클래스-생성" class="headerlink" title="좌표 클래스 생성"></a>좌표 클래스 생성</h4><p>자바에는 <code>tuple</code>이 없다 (뚜둥. 나는 이걸 몰랐었다). 따라서 처음에는 길이가 2인 <code>int</code> 배열을 만들어서 array[0]은 x, array[1]은 y의 형태로 각 좌표를 담았었다. 근데 이 좌표들을 <code>ArrayList</code>에 담아서 보관하려 했더니 구현은 되지만 옳지 않다는 조언<sup><a href="#Reference">1</a></sup>을 듣고(코드 리뷰가 절실…🥺) 직접 <code>Coordinate</code> 클래스를 만들어서 객체를 생성하는 형식으로 바꿨다. </p><figure class="highlight java"><figcaption><span>the coordinate class</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    Coordinate(<span class="keyword">int</span> x, <span class="keyword">int</span> y) {</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>특별히 좌표의 값을 새롭게 지정할 일은 없을 것 같아서 <code>setter</code>는 만들지 않았다. 이렇게 만든 좌표들을 <strong>visited</strong>라는 <code>ArrayList</code>에 담아서 이미 입력된 좌표는 아닌지 확인할 수 있도록 했다. </p><figure class="highlight java"><figcaption><span>visited</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Coordinate&gt; visited = <span class="keyword">new</span> ArrayList&lt;Coordinate&gt;();</span><br></pre></td></tr></tbody></table></figure><br><h4 id="플레이어-좌표-입력받기"><a href="#플레이어-좌표-입력받기" class="headerlink" title="플레이어 좌표 입력받기"></a>플레이어 좌표 입력받기</h4><p>게임이 시작하며(=게임 loop 시작) 사용자에게 input을 입력받게 된다. 사용자가 직접 입력해야 하는 만큼 잘못된 input이 들어올 수 있다고 생각했다. 따라서 이 부분은 <code>try-catch</code>를 이용해 잘못된 input이 입력되면 에러 메세지를 띄우도록 했다.</p><p>올바른 좌표를 입력받게 되면 <code>Coordinate</code> 객체를 생성해 해당 좌표를 생성하고, 아까 만들어둔 visited 배열에 이번 좌표가 있는지 확인 후 <code>boolean</code>을 리턴하는 <code>contains()</code> 메서드를 만들었다. </p><figure class="highlight java"><figcaption><span>contains</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(List&lt;Coordinate&gt; visited, Coordinate xy)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (Coordinate c : visited) {</span><br><span class="line">        <span class="keyword">if</span> (c.getX() == xy.getX() &amp;&amp; c.getY() == xy.getY()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    <span class="comment">//만약 좌표가 visited에 있으면 true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>visited에 없는 좌표라면 당연히 입력 가능한 좌표기 때문에 table에 플레이어의 표시인 <code>1</code>을 해당 위치에 넣어주고 visited에 추가를 해준다. </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Coordinate playerXY = <span class="keyword">new</span> Coordinate(sc.nextInt() - <span class="number">1</span>, sc.nextInt() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!contains(visited, playerXY)) {</span><br><span class="line">    table[playerXY.getX()][playerXY.getY()] = <span class="number">1</span>;    <span class="comment">//플레이어 표시</span></span><br><span class="line">    visited.add(playerXY);  <span class="comment">//방문처리</span></span><br><span class="line">    cnt++;  </span><br><span class="line">    printTable(table);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h3 id="컴퓨터-좌표-생성하기"><a href="#컴퓨터-좌표-생성하기" class="headerlink" title="컴퓨터 좌표 생성하기"></a>컴퓨터 좌표 생성하기</h3><p>자, 이제 나름 이 프로그램의 핵심인 컴퓨터의 좌표를 생성해야 한다. 이 프로그램이 <strong>작고 귀여운</strong> 이유는 컴퓨터가 우승하려는 의지가 전혀 없기 때문이다ㅎ. 우리의 상대방인 컴퓨터는 남은 빈칸들 중에서 <del>랜덤으로</del> 좌표를 선택한다. 간단하게 visited에 없는 좌표가 나올 때까지 <code>random.nextInt(3)</code>을 통해 좌표를 생성하고 플레이어와 반대로 <code>-1</code>을 값으로 넣어준다.</p><figure class="highlight java"><figcaption><span>computer's turn</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">    Coordinate randomXY = <span class="keyword">new</span> Coordinate(random.nextInt(<span class="number">3</span>), random.nextInt(<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">if</span> (!contains(visited, randomXY)) {</span><br><span class="line">        table[randomXY.getX()][randomXY.getY()] = -<span class="number">1</span>;</span><br><span class="line">        visited.add(randomXY);</span><br><span class="line">        cnt++;</span><br><span class="line">        printTable(table);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>비록 지금은 조금 덜 똑똑해 보이는 opponent지만 앞으로 더 똑똑해지도록 발전시킬 예정이다 (이 포스트의 제목 뒤에 -1-이 붙어있는 이유🤘). </p><br><h3 id="우승자-확인하기"><a href="#우승자-확인하기" class="headerlink" title="우승자 확인하기"></a>우승자 확인하기</h3><p>각 턴이 지난 후 우승자가 있는지 확인하는 것도 좋지만, 굳이 모든 턴마다 빙고를 확인하는 메서드를 실행할 필요는 없다고 생각했다. 따라서 각 턴이 지날 때마다 증가하는 <code>cnt</code> 변수를 생성해두고, 게임이 5턴 이상 진행되었을 때부터 빙고를 확인하도록 했다 (나름의 효율성과 시간을 고려한 전략). </p><figure class="highlight java"><figcaption><span>check for bingo</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">4</span>) {</span><br><span class="line">    <span class="comment">// 9회차 = 가능한 게임의 마지막 턴</span></span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">9</span>) {</span><br><span class="line">        System.out.println(checkWinner(table));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    result = checkWinner(table);    <span class="comment">//아직 우승자가 나오지 않은 경우 Draw라 리턴된다</span></span><br><span class="line">    <span class="keyword">if</span> (!result.equals(<span class="string">"Draw"</span>)) {   <span class="comment">//우승자가 나오면 결과 바로 프린트하기</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>만약 아직 테이블에 빈칸이 남아있지만 그전에 우승자가 나온다면 바로 게임이 끝날 수 있도록 했다. </p><p>이제 우승자를 찾아내는 메서드를 보자. 앞서 플레이어는 <code>1</code>이고 컴퓨터가 <code>-1</code>이라고 설계했는데, 이것은 빙고를 조금 더 빠르게 찾아내기 위해서였다. 만약 연속으로 <code>111</code>이 있다면 그 줄의 합은 <code>3</code>일 것이기 때문에 각 방향의 합만 찾으면 우승자가 있는지 없는지 알 수 있다. </p><figure class="highlight java"><figcaption><span>check for winner</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">checkWinner</span><span class="params">(<span class="keyword">int</span>[][] table)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> leftSum = <span class="number">0</span>, rightSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">        <span class="keyword">int</span> rowSum = <span class="number">0</span>, colSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) {</span><br><span class="line">            rowSum += table[i][j];</span><br><span class="line">            colSum += table[j][i];</span><br><span class="line">            rightSum += table[j][<span class="number">2</span> - j];</span><br><span class="line">        }</span><br><span class="line">        leftSum += table[i][i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rowSum == <span class="number">3</span> || colSum == <span class="number">3</span> || leftSum == <span class="number">3</span> || rightSum == <span class="number">3</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"X wins"</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (rowSum == -<span class="number">3</span> || colSum == -<span class="number">3</span> || leftSum == -<span class="number">3</span> || rightSum == -<span class="number">3</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"O wins"</span>;</span><br><span class="line">        }</span><br><span class="line">        rightSum = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Draw"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>가로, 세로, 대각선으로 돌면서 각 방향의 합이 <code>3</code>이 나오면 플레이어가 우승, <code>-3</code>이 나오면 컴퓨터가 우승하는 것이다. </p><br><h2 id="프로젝트를-마무리하며"><a href="#프로젝트를-마무리하며" class="headerlink" title="프로젝트를 마무리하며"></a>프로젝트를 마무리하며</h2><p>나의 작고 귀여운 tic tac toe 프로젝트는 아직 끝나지 않았다. 아직 상대편인 컴퓨터가 덜 똑똑하기 때문이다ㅋㅋㅋㅋ. </p><p>정말 간단할 거라고 생각해서 시작한 사이드 프로젝트였는데, 생각 이상으로 많은 것을 배울 수 있었다. 분명 코드로 옮기기 전에 나름 논리적으로 로직을 설계했다고 생각했는데, 막상 코드로 옮겨 적고 나니 삼백만 개의 문제에 부딪혔다🤦‍♀️. 하지만 문제들을 해결하면서 전보다 자바를 더 이해할 수 있게 된 것 같아서 아주 뿌듯하다. </p><p>또한, 코드 리뷰가 정말 정말 중요하다는 것을 깨달았다. 아무리 내가 혼자 열심히 생각하고 구현해도 이게 잘 쓴 코드인지 알 수가 없었다. 이때 너무 감사하게도 <a href="http://linkedin.com/in/종현-이-a413a1ab">현 스푼 라디오 이종현 개발자님</a>이 한 줄기 빛과 같은 코드 리뷰를 해주셨다(🙇‍♀️🙇‍♀️🙇‍♀️). 리뷰를 받고 다시 한번 깨달았다. 코드 리뷰가 진짜 중요하다는 것을…그리고 앞으로 공부할 게 정말 많다는 것을…</p><p>여러모로 재밌는 프로젝트였다. 다음엔 더 똑똑해진 컴퓨터를 만들어봐야지!</p><p><em>전체 코드를 보려면 <a href="https://github.com/itzjamie96/Studying-Java/blob/master/Tic-Tac-Toe/TicTackToe/src/stage2/Main.java">여기</a>로!</em></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/788433/can-you-pass-an-int-array-to-a-generic-method-in-java">Can you pass an int array to a generic method in java?</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2021/01/10/project-java-tictactoe-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 파이썬 SW 문제해결 기본: Stack1</title>
      <link>https://itzjamie96.github.io/2020/12/30/swea-python-ps-stack1/</link>
      <guid>https://itzjamie96.github.io/2020/12/30/swea-python-ps-stack1/</guid>
      <pubDate>Wed, 30 Dec 2020 12:31:40 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDN86AAXw5UW6&amp;amp;subjectId=AWOVHzyqqe8DFAWg#&quot;&gt;[문제링크] 파이썬 SW 문제해결 기본 - Stack1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4869-종이붙이기&quot;&gt;&lt;a href=&quot;#4869-종이붙이기&quot; class=&quot;headerlink&quot; title=&quot;[4869] 종이붙이기&quot;&gt;&lt;/a&gt;[4869] 종이붙이기&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;점화식 구하기 = 최종적으로 어떤 경우가 남는지 확인한다&lt;/li&gt;
&lt;li&gt;가로 길이가 10인 종이와 20인 종이로 만들 수 있는 경우는 총 3가지다&lt;/li&gt;
&lt;li&gt;10짜리 종이가 끝에 오는 경우 1개, 20짜리 종이가 끝에 오는 경우 2개&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDN86AAXw5UW6&amp;subjectId=AWOVHzyqqe8DFAWg#">[문제링크] 파이썬 SW 문제해결 기본 - Stack1</a></p><h2 id="4869-종이붙이기"><a href="#4869-종이붙이기" class="headerlink" title="[4869] 종이붙이기"></a>[4869] 종이붙이기</h2><p><strong>접근 방법</strong></p><ul><li>점화식 구하기 = 최종적으로 어떤 경우가 남는지 확인한다</li><li>가로 길이가 10인 종이와 20인 종이로 만들 수 있는 경우는 총 3가지다</li><li>10짜리 종이가 끝에 오는 경우 1개, 20짜리 종이가 끝에 오는 경우 2개</li></ul><a id="more"></a><blockquote><p>나는 처음에 이 문제를 대체 어떻게 접근해야 할지 몰라서 좌절했었다. 다행히 점화식에 대한 접근은 어떤 친절한 분이 <a href="https://swexpertacademy.com/main/talk/solvingTalk/boardCommuView.do?searchCondition=COMMU_DETAIL-COMMU_TITLE-NICK_NAME_TAG&amp;commuId=AW1jVju6NjIDFARC&amp;searchKeyword=DP&amp;orderBy=COUNT_DESC&amp;pageSize=30&amp;pageIndex=1">SWEA Solving Talk에 답변</a>해 주신 걸 보고 이해할 수 있었다.</p></blockquote><p><img src="/img/20201230/4869.png" alt="4869 점화식 구하기"></p><figure class="highlight python"><figcaption><span>4869</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paste</span><span class="params">(N)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> N &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> paste(N<span class="number">-1</span>) + <span class="number">2</span>*paste(N<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    N = int(input())//<span class="number">10</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc, paste(N)))</span><br></pre></td></tr></tbody></table></figure><br><h2 id="4866-괄호검사"><a href="#4866-괄호검사" class="headerlink" title="[4866] 괄호검사"></a>[4866] 괄호검사</h2><p><strong>접근 방법</strong></p><ul><li>여는 괄호(<code>{</code> or <code>(</code>)가 있으면 스택에 넣어준다</li><li>닫는 괄호(<code>}</code> or <code>)</code>)가 들어오면<ul><li>스택의 top이 짝이 되는 열린 괄호가 아니면 바로 리턴 0<ul><li>ex) <code>}</code>이 들어왔는데 top이 <code>(</code>인 경우</li></ul></li><li>스택의 top이 짝이 되는 열린 괄호가 맞는다면 pop 해준다</li></ul></li><li>input의 길이만큼 for 문이 다 돌고도 스택에 뭐가 남아있으면 짝이 없는 것이기 때문에 리턴 0</li><li>그동안 강제 리턴도 없었고 스택에 남은 것도 없으면 리턴 1</li></ul><figure class="highlight python"><figcaption><span>4866</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPair</span><span class="params">(string)</span>:</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> element == <span class="string">'{'</span> <span class="keyword">or</span> element == <span class="string">'('</span>:</span><br><span class="line">            stack.append(element)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> element == <span class="string">'}'</span>:</span><br><span class="line">            <span class="keyword">if</span> len(stack)&gt;<span class="number">0</span> <span class="keyword">and</span> stack[<span class="number">-1</span>] == <span class="string">'{'</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> element == <span class="string">')'</span>:</span><br><span class="line">            <span class="keyword">if</span> len(stack)&gt;<span class="number">0</span> <span class="keyword">and</span> stack[<span class="number">-1</span>] == <span class="string">'('</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line">    string = input()</span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc, isPair(string)))</span><br></pre></td></tr></tbody></table></figure><br><h2 id="4871-그래프-경로"><a href="#4871-그래프-경로" class="headerlink" title="[4871] 그래프 경로"></a>[4871] 그래프 경로</h2><p><strong>접근 방법</strong></p><ul><li>모든 경로의 경우를 path라는 리스트에 담아둔다</li><li>path에 S~G가 다 있으면 1, 없으면 0</li></ul><figure class="highlight python"><figcaption><span>4871</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findRoute</span><span class="params">(vertex)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 만약 현재 들어온 vertex가 end와 동일하다면</span></span><br><span class="line">    <span class="comment"># path안에 vertex/end가 있는지 확인하고 있으면 1로 처리 후 리턴</span></span><br><span class="line">    <span class="keyword">if</span> vertex == end:</span><br><span class="line">        <span class="keyword">if</span> vertex <span class="keyword">in</span> path:</span><br><span class="line">            ans = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 1 ~ V까지 모든 vertex를 돌면서</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, V + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 현재 vertex와 연결된 다른 vertex중 아직 확인 안해본 게 있는지 찾아본다</span></span><br><span class="line">            <span class="keyword">if</span> graph[vertex][i] == <span class="number">1</span> <span class="keyword">and</span> visited[i] == <span class="number">0</span>:</span><br><span class="line">                visited[i] = <span class="number">1</span>  <span class="comment"># 있다면 방문처리 후 path에 넣어준다</span></span><br><span class="line">                path.append(i)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># vertex - i의 연결이 확인됐으니 i와 또 연결된 다른 vertex가 있는지 </span></span><br><span class="line">                <span class="comment"># 확인하기 위해 재귀로 호출</span></span><br><span class="line">                findRoute(i)</span><br><span class="line"></span><br><span class="line">                visited[i] = <span class="number">0</span></span><br><span class="line">                path.pop  <span class="comment"># 딱히 루트가 없었다면 path에서 현재 i를 뺀다</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T + <span class="number">1</span>):</span><br><span class="line">    V, E = map(int, input().split())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 ~ V까지 있는 그래프를 만든다</span></span><br><span class="line">    graph = [[<span class="number">0</span>] * (V + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(V + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 ~ V까지 있는 리스트를 만든다 (방문처리용)</span></span><br><span class="line">    visited = [<span class="number">0</span>] * (V + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 그래프에 edge들을 표시해준다</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(E):</span><br><span class="line">        a, b = map(int, input().split())</span><br><span class="line">        graph[a][b] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># S와 G를 받는다 (이해가 쉽도록 start와 end로 변수명을 바꿨다)</span></span><br><span class="line">    start, end = map(int, input().split())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># path라는 리스트를 만든다</span></span><br><span class="line">    <span class="comment"># start와 연결된 vertex들은 여기에 추가될 것이다</span></span><br><span class="line">    path = [start]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 시작점부터 방문처리 해준다</span></span><br><span class="line">    visited[start] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 답은 0이나 1만 가능</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    findRoute(start)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc, ans))</span><br></pre></td></tr></tbody></table></figure><br><h2 id="4873-반복문자-지우기"><a href="#4873-반복문자-지우기" class="headerlink" title="[4873] 반복문자 지우기"></a>[4873] 반복문자 지우기</h2><p><strong>접근 방법</strong></p><ul><li>현재 문자와 바로 다음 문자가 같다면 문자 하나를 지운다</li><li>지우는 방법: <code>시작-i</code> + <code>i+2-끝</code></li><li>지운 후에는 다시 맨 첫번째 인덱스부터 확인할 수 있도록 인덱스 값을 0으로 바꿔준다</li><li>만약 현재 문자와 다음 문자가 다르다면 그 다음 인덱스로 넘어간다</li></ul><figure class="highlight python"><figcaption><span>4873</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    text = input()</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> i == len(text)<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> text[i] == text[i + <span class="number">1</span>]:</span><br><span class="line">                text = text[:i] + text[i + <span class="number">2</span>:]</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc, len(text)))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/30/swea-python-ps-stack1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Git] cherry-pick으로 원하는 commit 가져오기</title>
      <link>https://itzjamie96.github.io/2020/12/10/git-cherry-pick-basics/</link>
      <guid>https://itzjamie96.github.io/2020/12/10/git-cherry-pick-basics/</guid>
      <pubDate>Thu, 10 Dec 2020 13:22:02 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;최근 새롭게 알고리즘 스터디를 꾸리게 되면서 git의 cherry-pick 기능을 써보게 되었다. git은 &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt; 명령어만 아는 git알못이었는데, 스터디 덕분에 새로운 git잘알에 한 발자국 다가가게 된 것 같다. 나도 git잘알이 되고 싶어서 정리해본 &lt;code&gt;cherry-pick&lt;/code&gt;! &lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><blockquote><p>최근 새롭게 알고리즘 스터디를 꾸리게 되면서 git의 cherry-pick 기능을 써보게 되었다. git은 <code>add</code>, <code>commit</code>, <code>push</code> 명령어만 아는 git알못이었는데, 스터디 덕분에 새로운 git잘알에 한 발자국 다가가게 된 것 같다. 나도 git잘알이 되고 싶어서 정리해본 <code>cherry-pick</code>! </p></blockquote><a id="more"></a><h2 id="cherry-pick-무슨-뜻이람"><a href="#cherry-pick-무슨-뜻이람" class="headerlink" title="cherry-pick? 무슨 뜻이람"></a>cherry-pick? 무슨 뜻이람</h2><p>git의 명령어들은 영어다. 다행히 난 영문학과 출신이다. <del>cherry-pick</del> 두 단어를 보니 체리를 고른다는 뜻 같다. 이게 뭐람? </p><blockquote><p>A metaphor, from the idea of picking through a bowl of cherries and seeking the best for oneself, or the idea of picking off the cherries for oneself from a cake or dessert.<sup><a href="#Reference">1</a></sup></p></blockquote><p>찾아보니 체리 한 바구니에서 <del>제일 좋은 체리만 고르는 것</del>에서 유래한 표현이라고 한다. git에서만 쓰는 표현인 줄 알았는데 알고 보니 그냥 동사였다. 일반적으로는 제일 좋은 걸 선별한다는 뜻으로 쓰인다고 한다. 영어공부도 하고 git 공부도 하고 진짜 일석이조다. </p><p>자, 그렇다면 git에서 제일 좋은 것만 고른다는 건 무슨 뜻일까?</p><br><h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p><code>git cherry-pick</code> 명령어는 git log에서 <del>특정한 commit 하나만 콕 찝어서</del> 현재 HEAD가 가리키는 <del>branch에 추가</del>할 수 있게 해준다. 쉽게 말해서 다른 branch에 있는 commit을 지금 내 branch에 가져와서 commit 할 수 있는 것이다. </p><p>참고로 commit을 branch에서 다른 branch로 <del>옮기는 건 아니고</del>, 전체 history를 따지면 새로운 commit이 늘어나는 것이다. </p><br><h2 id="cherry-pick은-언제-써야-할까"><a href="#cherry-pick은-언제-써야-할까" class="headerlink" title="cherry-pick은 언제 써야 할까"></a>cherry-pick은 언제 써야 할까</h2><p>유용하긴 하지만 <code>cherry-pick</code>이 항상 권장되는 것은 아니라고 한다. 같은 commit이 여러 번 쌓이는 일도 발생할 수 있기 때문에 cherry-picking이 가능한 상황에서 보통은 일반적인 <code>merge</code>를 사용하는 걸 선호한다고 한다.<sup><a href="#Reference">2</a></sup> 그렇다면 cherry-pick은 어떤 상황에서 유용할까? <strong>예시 상황</strong>을 생각해 보자. </p><h3 id="팀으로-협업할-때"><a href="#팀으로-협업할-때" class="headerlink" title="팀으로 협업할 때"></a>팀으로 협업할 때</h3><p>친구랑 사이드 프로젝트를 진행하고 있다. 나는 백엔드다. 현재 내가 맡은 기능이 프론트까지 더해졌을 때 어떻게 돌아가는지 확인하고 싶은데 프론트엔드를 맡은 친구가 지금 한창 작업 중이라고 한다. 아까 CSS 파일을 완성해서 commit해 뒀다고 한다. 그럼 난 <code>cherry-pick</code>을 통해 <del>그 commit 하나만 찾아서</del> 내 branch에 가져오면 된다. 오 CSS만 입혀볼 수 있게 됐다.</p><h3 id="버그-수정"><a href="#버그-수정" class="headerlink" title="버그 수정"></a>버그 수정</h3><p>나는 며칠 전 A 기능을 완성한 개발자다. A가 끝나고 B 기능을 개발하는 중이었는데, 알고 보니 A 기능에 버그가 있다고 한다. 더 많은 유저들이 이 버그로 인한 현상을 겪기 전에 빠르게 버그 패치를 해서 내 branch에 commit한다. 내가 방금 commit한 이 패치는 <code>git cherry-pick</code>을 통해 <code>main</code> branch에 바로 반영되었다. 휴 문제 해결.</p><h3 id="반영되지-않은-pr"><a href="#반영되지-않은-pr" class="headerlink" title="반영되지 않은 pr"></a>반영되지 않은 pr</h3><p>실수로 pull request를 <code>merge</code>하기 전에 닫아버렸다. 당황하지 않고 <code>git cherry-pick</code>을 통해 해당 commit을 가져옴으로써 살릴 수 있게 됐다. </p><h3 id="알고리즘-스터디"><a href="#알고리즘-스터디" class="headerlink" title="알고리즘 스터디"></a>알고리즘 스터디</h3><p>이건 실제 나의 경우인데, 알고리즘 스터디를 하며 스터디원들의 코드를 올리는 repository에서 main branch에서 모두의 코드를 push하는 것보다 각자의 branch를 만들어서 각각 올리는 방식을 선택했다. 우리는 주어진 같은 문제를 풀어오는 것을 원칙으로 하기 때문에 각 문제별 폴더를 main에서 생성하면 <code>cherry-pick</code>을 통해 폴더를 생성한 commit만 각자 branch로 따온다. </p><br><h2 id="cherry-pick-사용법"><a href="#cherry-pick-사용법" class="headerlink" title="cherry-pick 사용법"></a>cherry-pick 사용법</h2><h3 id="가져오고-싶은-commit의-이름-확인하기"><a href="#가져오고-싶은-commit의-이름-확인하기" class="headerlink" title="가져오고 싶은 commit의 이름 확인하기"></a>가져오고 싶은 commit의 이름 확인하기</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></tbody></table></figure><p>git log 명령어를 통해 내가 cherry-pick하고자 하는 commit의 이름을 확인한다. </p><p><img src="/img/20201210/git_log_example.png" alt="git log example"></p><p>내가 찾는 commit의 Hash 값을 복사한다. 예시에선 abc123이라고 적어뒀다. </p><h3 id="cherry-pick으로-추가하려는-branch로-이동"><a href="#cherry-pick으로-추가하려는-branch로-이동" class="headerlink" title="cherry-pick으로 추가하려는 branch로 이동"></a>cherry-pick으로 추가하려는 branch로 이동</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch name&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="cherry-pick-진행"><a href="#cherry-pick-진행" class="headerlink" title="cherry-pick 진행"></a>cherry-pick 진행</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick abc123</span><br></pre></td></tr></tbody></table></figure><p>끝! 잘 commit되었는지 확인하려면 <code>git log</code>를 통해 내 branch의 commit 내역을 보면 된다.</p><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://en.wiktionary.org/wiki/cherry-pick"><sup>1</sup> Wikipedia: cherry-pick</a><br><a href="https://www.atlassian.com/git/tutorials/cherry-pick"><sup>2</sup> Bitbucket: Git Cherry Pick</a><br><a href="https://www.merriam-webster.com/dictionary/cherry-pick">cherry-pick의 사전적 의미(Merriam Webster)</a><br><a href="https://stackoverflow.com/questions/9339429/what-does-cherry-picking-a-commit-with-git-mean#:~:text=The%20command%20git%20cherry%2Dpick%20is%20typically%20used%20to%20introduce,branch%20to%20a%20development%20branch.">Stack overflow: What does cherry-picking a commit with Git mean?</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/10/git-cherry-pick-basics/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 2007. 패턴 마디의 길이 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/06/swea-python-2007/</link>
      <guid>https://itzjamie96.github.io/2020/12/06/swea-python-2007/</guid>
      <pubDate>Sun, 06 Dec 2020 05:36:49 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5P1kNKAl8DFAUq&quot;&gt;2007. 패턴 마디의 길이&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;받은 문자열에서 길이가 1~10인 가능한 패턴을 모두 찾아서 리스트에 넣어준다&lt;/li&gt;
&lt;li&gt;패턴 리스트에서 for문을 돌리며 현재 있는 패턴이 반복되는 패턴이 맞는지 확인한다&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5P1kNKAl8DFAUq">2007. 패턴 마디의 길이</a></p><p><strong>접근 방법</strong></p><ul><li>받은 문자열에서 길이가 1~10인 가능한 패턴을 모두 찾아서 리스트에 넣어준다</li><li>패턴 리스트에서 for문을 돌리며 현재 있는 패턴이 반복되는 패턴이 맞는지 확인한다</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>2007</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    string = input()</span><br><span class="line"></span><br><span class="line">    pList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        pList.append(string[:i])</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        tmp = len(pList[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> string[:tmp] == string[tmp:<span class="number">2</span> * tmp]:</span><br><span class="line">            <span class="keyword">if</span> tmp &lt; ans:</span><br><span class="line">                ans = tmp</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc, ans))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/06/swea-python-2007/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 2005. 파스칼의 삼각형 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/05/swea-python-2005/</link>
      <guid>https://itzjamie96.github.io/2020/12/05/swea-python-2005/</guid>
      <pubDate>Sat, 05 Dec 2020 05:31:08 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5P0-h6Ak4DFAUq&quot;&gt;2005. 파스칼의 삼각형&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;result를 이차원 배열로 만든다&lt;/li&gt;
&lt;li&gt;첫째줄은 [1]&lt;/li&gt;
&lt;li&gt;그 다음 줄 부터: 바로 앞 리스트에서 두개씩 더해서 현재 리스트에 더해주면 [1, a, b]의 꼴이 나옴&lt;/li&gt;
&lt;li&gt;그 뒤에 1을 하나 더 추가해준다&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5P0-h6Ak4DFAUq">2005. 파스칼의 삼각형</a></p><p><strong>접근 방법</strong></p><ul><li>result를 이차원 배열로 만든다</li><li>첫째줄은 [1]</li><li>그 다음 줄 부터: 바로 앞 리스트에서 두개씩 더해서 현재 리스트에 더해주면 [1, a, b]의 꼴이 나옴</li><li>그 뒤에 1을 하나 더 추가해준다</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>2005</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    N = int(input())</span><br><span class="line">    result = [[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N):</span><br><span class="line">        row = [<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(result[<span class="number">-1</span>])<span class="number">-1</span>):</span><br><span class="line">            sumV = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">                sumV += result[<span class="number">-1</span>][j+k]</span><br><span class="line">            row.append(sumV)</span><br><span class="line">        row.append(<span class="number">1</span>)</span><br><span class="line">        result.append(row)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'#{}'</span>.format(tc))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">        print(*result[i])</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/05/swea-python-2005/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 2001. 파리 퇴치 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/05/swea-python-2001/</link>
      <guid>https://itzjamie96.github.io/2020/12/05/swea-python-2001/</guid>
      <pubDate>Sat, 05 Dec 2020 05:28:02 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PzOCKAigDFAUq&quot;&gt;2001. 파리 퇴치&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가로/세로로 M*M의 합을 확인하기 위해 이동할 수 있는 횟수 = N-M+1&lt;/li&gt;
&lt;li&gt;0 ~ N-M+1까지 이동하면서 그 안에서 M*M으로 이중for문을 돌린다&lt;ul&gt;
&lt;li&gt;M*M의 합이 현재 있는 최대합보다 크면 최대합 갱신해주기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PzOCKAigDFAUq">2001. 파리 퇴치</a></p><p><strong>접근 방법</strong></p><ul><li>가로/세로로 M*M의 합을 확인하기 위해 이동할 수 있는 횟수 = N-M+1</li><li>0 ~ N-M+1까지 이동하면서 그 안에서 M*M으로 이중for문을 돌린다<ul><li>M*M의 합이 현재 있는 최대합보다 크면 최대합 갱신해주기</li></ul></li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>2001</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line">    N, M = map(int, input().split())</span><br><span class="line"></span><br><span class="line">    square = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line">    maxi = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N-M+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N-M+<span class="number">1</span>):</span><br><span class="line">            current = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(M):</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> range(M):</span><br><span class="line">                    current += square[j+l][i+k]</span><br><span class="line">            <span class="keyword">if</span> current &gt; maxi:</span><br><span class="line">                maxi = current</span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc, maxi))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/05/swea-python-2001/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1989. 초심자의 회문 검사 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/04/swea-python-1989/</link>
      <guid>https://itzjamie96.github.io/2020/12/04/swea-python-1989/</guid>
      <pubDate>Fri, 04 Dec 2020 05:27:01 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PyTLqAf4DFAUq&quot;&gt;1989. 초심자의 회문 검사&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단어를 str으로 받아서 뒤집은거랑 똑같은지 확인한다&lt;/li&gt;
&lt;li&gt;같으면 1, 아니면 0 출력&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PyTLqAf4DFAUq">1989. 초심자의 회문 검사</a></p><p><strong>접근 방법</strong></p><ul><li>단어를 str으로 받아서 뒤집은거랑 똑같은지 확인한다</li><li>같으면 1, 아니면 0 출력</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1989</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    word = input()</span><br><span class="line">    <span class="keyword">if</span> word == word[::<span class="number">-1</span>]:</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'#{} {}'</span>.format(tc, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'#{} {}'</span>.format(tc, <span class="number">0</span>))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/04/swea-python-1989/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1986. 지그재그 숫자 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/04/swea-python-1986/</link>
      <guid>https://itzjamie96.github.io/2020/12/04/swea-python-1986/</guid>
      <pubDate>Fri, 04 Dec 2020 05:25:28 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PxmBqAe8DFAUq&quot;&gt;1986. 지그재그 숫자&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1부터 N까지 홀수는 더하고 짝수는 뺀다&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PxmBqAe8DFAUq">1986. 지그재그 숫자</a></p><p><strong>접근 방법</strong></p><ul><li>1부터 N까지 홀수는 더하고 짝수는 뺀다</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1986</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    N = int(input())</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>:</span><br><span class="line">            result += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result -= i</span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc, result))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/04/swea-python-1986/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1984. 중간 평균값 구하기 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/03/swea-python-1984/</link>
      <guid>https://itzjamie96.github.io/2020/12/03/swea-python-1984/</guid>
      <pubDate>Thu, 03 Dec 2020 05:24:22 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5Pw_-KAdcDFAUq&quot;&gt;1984. 중간 평균값 구하기&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트로 받아서 정렬한다&lt;/li&gt;
&lt;li&gt;1번과 마지막꺼 뺀 값들의 합을 구한다&lt;/li&gt;
&lt;li&gt;합 / 8 = 평균&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5Pw_-KAdcDFAUq">1984. 중간 평균값 구하기</a></p><p><strong>접근 방법</strong></p><ul><li>리스트로 받아서 정렬한다</li><li>1번과 마지막꺼 뺀 값들의 합을 구한다</li><li>합 / 8 = 평균</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1984</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line">    nums = sorted(list(map(int, input().split())))</span><br><span class="line"></span><br><span class="line">    sumV = sum(nums[<span class="number">1</span>:<span class="number">9</span>])</span><br><span class="line">    avg = round(sumV/<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc,avg))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/03/swea-python-1984/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1983. 조교의 성적 매기기 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/03/swea-python-1983/</link>
      <guid>https://itzjamie96.github.io/2020/12/03/swea-python-1983/</guid>
      <pubDate>Thu, 03 Dec 2020 05:23:11 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PwGK6AcIDFAUq&quot;&gt;1983. 조교의 성적 매기기&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 학생의 총점을 구해서 순서대로 리스트에 넣는다&lt;/li&gt;
&lt;li&gt;인덱스랑 함께 총점 기준으로 정렬한다&lt;/li&gt;
&lt;li&gt;N//10으로 정렬한 인덱스를 나눈다&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PwGK6AcIDFAUq">1983. 조교의 성적 매기기</a></p><p><strong>접근 방법</strong></p><ul><li>각 학생의 총점을 구해서 순서대로 리스트에 넣는다</li><li>인덱스랑 함께 총점 기준으로 정렬한다</li><li>N//10으로 정렬한 인덱스를 나눈다</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1983</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">grades = [<span class="string">'A+'</span>, <span class="string">'A0'</span>, <span class="string">'A-'</span>, <span class="string">'B+'</span>, <span class="string">'B0'</span>, <span class="string">'B-'</span>, <span class="string">'C+'</span>, <span class="string">'C0'</span>, <span class="string">'C-'</span>, <span class="string">'D0'</span>]</span><br><span class="line"></span><br><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    N, K = map(int, input().split())</span><br><span class="line"></span><br><span class="line">    scores = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        mid, fin, hw = map(int, input().split())</span><br><span class="line"></span><br><span class="line">        scores.append(<span class="number">0.35</span>*mid + <span class="number">0.45</span>*fin + <span class="number">0.2</span>*hw)</span><br><span class="line"></span><br><span class="line">    result = [(score, idx+<span class="number">1</span>) <span class="keyword">for</span> idx, score <span class="keyword">in</span> enumerate(scores)]</span><br><span class="line">    result.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    tmp = N//<span class="number">10</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> result[i][<span class="number">1</span>] == K:</span><br><span class="line">            ans = i//tmp</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc,grades[ans]))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/03/swea-python-1983/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1979. 어디에 단어가 들어갈 수 있을까 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/03/swea-python-1979/</link>
      <guid>https://itzjamie96.github.io/2020/12/03/swea-python-1979/</guid>
      <pubDate>Thu, 03 Dec 2020 04:52:00 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PuPq6AaQDFAUq&quot;&gt;1979. 어디에 단어가 들어갈 수 있을까&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수로 K길이의 1이 나오는지 확인한다 (가능한 공백은 1로 표시됨)&lt;ul&gt;
&lt;li&gt;확인할 문자열 check를 만들어둔다&lt;/li&gt;
&lt;li&gt;현재 input으로 들어온 줄에서 1이 연속으로 나올 때 check에 넣어줌&lt;ul&gt;
&lt;li&gt;만약 K랑 길이가 같으면 cnt+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PuPq6AaQDFAUq">1979. 어디에 단어가 들어갈 수 있을까</a></p><p><strong>접근 방법</strong></p><ul><li>함수로 K길이의 1이 나오는지 확인한다 (가능한 공백은 1로 표시됨)<ul><li>확인할 문자열 check를 만들어둔다</li><li>현재 input으로 들어온 줄에서 1이 연속으로 나올 때 check에 넣어줌<ul><li>만약 K랑 길이가 같으면 cnt+1</li></ul></li></ul></li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1979</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkK</span><span class="params">(current)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> Ks <span class="keyword">in</span> current :</span><br><span class="line">        check = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> check == <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">if</span> current[i] == <span class="string">'1'</span>:</span><br><span class="line">                    check += <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> current[i] == <span class="string">'1'</span>:</span><br><span class="line">                    check += <span class="string">'1'</span></span><br><span class="line">                    <span class="keyword">if</span> i == N<span class="number">-1</span> <span class="keyword">and</span> len(check) == K:</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> len(check) == K:</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                        check = <span class="string">''</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        check = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># T = 1</span></span><br><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    N, K = map(int, input().split())</span><br><span class="line">    board = [<span class="string">''</span>.join(input().split()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line">    Ks = <span class="string">'1'</span>*K  <span class="comment"># 들어갈 수 있는 자리 길이 확인</span></span><br><span class="line">    cnt = <span class="number">0</span>     <span class="comment"># 들어갈 수 있는 자리의 총 갯수</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 가로로 확인하기</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        checkK(board[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 세로로 확인하기</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        col = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            col += board[j][i]</span><br><span class="line">        checkK(col)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'#{} {}'</span>.format(tc,cnt))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/03/swea-python-1979/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1976. 시각 덧셈 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/03/swea-python-1976/</link>
      <guid>https://itzjamie96.github.io/2020/12/03/swea-python-1976/</guid>
      <pubDate>Thu, 03 Dec 2020 04:50:05 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PttaaAZIDFAUq&quot;&gt;1976. 시각 덧셈&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a시 a분, b시 b분 입력받기&lt;/li&gt;
&lt;li&gt;a시 + b시&lt;/li&gt;
&lt;li&gt;a분 + b분&lt;ul&gt;
&lt;li&gt;만약 a분+b분이 60초과라면 시+1, a+b분-60&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;13시 부터는 다시 12 빼주는거 잊지말기&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PttaaAZIDFAUq">1976. 시각 덧셈</a></p><p><strong>접근 방법</strong></p><ul><li>a시 a분, b시 b분 입력받기</li><li>a시 + b시</li><li>a분 + b분<ul><li>만약 a분+b분이 60초과라면 시+1, a+b분-60</li></ul></li><li>13시 부터는 다시 12 빼주는거 잊지말기</li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1976</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    h1, m1, h2, m2 = map(int, input().split())</span><br><span class="line"></span><br><span class="line">    hour = h1+h2</span><br><span class="line">    <span class="keyword">if</span> hour &gt; <span class="number">12</span>:</span><br><span class="line">        hour -= <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    minutes = m1+m2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> minutes &gt; <span class="number">60</span>:</span><br><span class="line">        minutes -= <span class="number">60</span></span><br><span class="line">        hour += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'#{} {} {}'</span>.format(tc, hour, minutes))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/03/swea-python-1976/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[SWEA] 1970. 쉬운 거스름돈 with Python</title>
      <link>https://itzjamie96.github.io/2020/12/02/swea-python-1970/</link>
      <guid>https://itzjamie96.github.io/2020/12/02/swea-python-1970/</guid>
      <pubDate>Wed, 02 Dec 2020 06:32:25 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PsIl6AXIDFAUq&quot;&gt;1970. 쉬운 거스름돈&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;제약사항에 위배되는 input이 많음!&lt;/strong&gt;&lt;br&gt;&lt;del&gt;2. N의 마지막 자릿수는 항상 0이다. (ex : 32850)&lt;/del&gt; &amp;lt;&amp;lt; 이거에 해당되지 않는 input이 아주 많음 👉 그래서 모든 1의 자리 수를 0으로 바꿨다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;money: 돈 종류를 모두 담은 리스트 (큰 돈 ~ 작은 돈 순서로 정렬)&lt;/li&gt;
&lt;li&gt;result: money과 같은 길이의 리스트 (내용물 모두 0)&lt;/li&gt;
&lt;li&gt;money의 0번째부터 주어진 돈을 나눠봄&lt;ul&gt;
&lt;li&gt;나눴을 때 0이라면 안 나눠지는 것 =&amp;gt; i+1&lt;/li&gt;
&lt;li&gt;나눠지면 그 나머지가 N이 됨&lt;/li&gt;
&lt;li&gt;result[i]에는 몫이 들어감&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PsIl6AXIDFAUq">1970. 쉬운 거스름돈</a></p><p><strong>접근 방법</strong></p><blockquote><p><strong>제약사항에 위배되는 input이 많음!</strong><br><del>2. N의 마지막 자릿수는 항상 0이다. (ex : 32850)</del> &lt;&lt; 이거에 해당되지 않는 input이 아주 많음 👉 그래서 모든 1의 자리 수를 0으로 바꿨다</p></blockquote><ul><li>money: 돈 종류를 모두 담은 리스트 (큰 돈 ~ 작은 돈 순서로 정렬)</li><li>result: money과 같은 길이의 리스트 (내용물 모두 0)</li><li>money의 0번째부터 주어진 돈을 나눠봄<ul><li>나눴을 때 0이라면 안 나눠지는 것 =&gt; i+1</li><li>나눠지면 그 나머지가 N이 됨</li><li>result[i]에는 몫이 들어감</li></ul></li></ul><a id="more"></a><br><figure class="highlight python"><figcaption><span>1970</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">1</span>, T+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 거스름돈</span></span><br><span class="line">    N = input()</span><br><span class="line">    N = int(N[:len(N)<span class="number">-1</span>]+<span class="string">'0'</span>)</span><br><span class="line">    <span class="comment"># print(N)</span></span><br><span class="line"></span><br><span class="line">    money = [<span class="number">50000</span>, <span class="number">10000</span>, <span class="number">5000</span>, <span class="number">1000</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">10</span>]</span><br><span class="line">    result = [<span class="number">0</span>]*len(money)</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(money) <span class="keyword">or</span> N &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> N // money[i] != <span class="number">0</span>:</span><br><span class="line">            result[i] += N//money[i]</span><br><span class="line">            N = N%money[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'#{} '</span>.format(tc))</span><br><span class="line">    print(*result)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/12/02/swea-python-1970/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
