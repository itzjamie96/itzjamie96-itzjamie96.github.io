<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jaylogue</title>
    <link>https://itzjamie96.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 19 Mar 2020 13:27:40 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Spring Framework 개요</title>
      <link>https://itzjamie96.github.io/2020/03/19/Spring-Dependency-Injection/</link>
      <guid>https://itzjamie96.github.io/2020/03/19/Spring-Dependency-Injection/</guid>
      <pubDate>Thu, 19 Mar 2020 11:02:51 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h2 id=&quot;Spring-Framework&quot;&gt;&lt;a href=&quot;#Spring-Framework&quot; class=&quot;headerlink&quot; title=&quot;Spring Framework&quot;&gt;&lt;/a&gt;Spring Framework&lt;/h2&gt;&lt;p&gt;Spring Framework는 Java 어플리케이션을 쉽고 빠르게 개발할 수 있도록 도와주는 &lt;code&gt;오픈 소스 프레임워크&lt;/code&gt;다. 스프링은 &lt;code&gt;lightweight = 경량&lt;/code&gt;  프레임워크로, Java 어플리케이션을 개발할 때 필요한 다양한 모듈을 제공한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여기서 모듈이란 프로그램을 구성하는 &lt;code&gt;구성 요소&lt;/code&gt;다. 기계에서 &lt;code&gt;부품&lt;/code&gt;이라고 생각하면 될 것 같다.&lt;br&gt;어떤 프로그램을 기능별로 나눈 후, 그 기능들을 다른 프로그램에 쓸 수 있다 = 모듈! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;스프링에서 제공하는 모듈:&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><p>Spring Framework는 Java 어플리케이션을 쉽고 빠르게 개발할 수 있도록 도와주는 <code>오픈 소스 프레임워크</code>다. 스프링은 <code>lightweight = 경량</code>  프레임워크로, Java 어플리케이션을 개발할 때 필요한 다양한 모듈을 제공한다.</p><blockquote><p>여기서 모듈이란 프로그램을 구성하는 <code>구성 요소</code>다. 기계에서 <code>부품</code>이라고 생각하면 될 것 같다.<br>어떤 프로그램을 기능별로 나눈 후, 그 기능들을 다른 프로그램에 쓸 수 있다 = 모듈! </p></blockquote><br><p>스프링에서 제공하는 모듈: <a id="more"></a></p><table><thead><tr><th>Modules</th><th>Features</th></tr></thead><tbody><tr><td>spring-core</td><td>스프링의 핵심인 DI(Dependcy Injection)와 IoC (Inversion of Control) 제공</td></tr><tr><td>spring-aop</td><td>AOP 구현 기능 제공</td></tr><tr><td>spring-jdbc</td><td>DB를 쉽게 다룰 수 있는 기능 제공</td></tr><tr><td>spring-tx</td><td>스프링에서 제공하는 트랜잭션 관련 기능 제공</td></tr><tr><td>spring-webmvc</td><td>스프링에서 제공하는 Controller와 View를 이용한 SpringMVC 구현 기능 제공</td></tr></tbody></table><p>프로젝트에 필요한 모듈들은 원격 어딘가의 라이브러리에 저장돼있다. pom.xml파일에 필요한 모듈을 적으면 저 멀리 원격 repository에 있는 라이브러리가 알아서 프로젝트에 다운된다!</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p><img src="/img/20200319_pom.png" alt="pom.xml"></p><p>pom.xml 파일 작성 후 Maven &gt; Update Project를 실행하면 <strong>Maven Dependencies</strong> 폴더 안에 관련 모듈들이 알맞은 버전으로 생긴다.<br><br></p><hr><h2 id="Spring-IoC-Container"><a href="#Spring-IoC-Container" class="headerlink" title="Spring IoC Container"></a>Spring IoC Container</h2><p>스프링 프레임워크에는 컨테이너가 하나 있다. 바로 객체를 생성하고 조립하는 컨테이너로 편하게 스프링 컨테이너라고 부르고, 여기서 생성된 객체를 <code>Bean</code>이라고 부른다. </p><blockquote><p>왜 Bean일까?<br>처음 스프링을 공부했을 때부터 항상 궁금했다. 왜 그동안은 object나 instance라고 부르다가 갑자기 bean일까?? 구글링을 백번해도 나오지 않는 Bean이라는 단어의 유래…<br>내 추측은 콩 껍질 안에 콩이 여러개 있는 모양이 스프링 프레임워크의 구조와 비슷해서 그렇게 지었나 싶다. 그럼 Container나 BeanFactory가 아니라 Pod여야하는 것 아닌가? 알 수 없군…</p></blockquote><p>Bean을 만드는 순서는:</p><ol><li>applicationContext.xml에 property등을 적어 bean을 만든다.</li><li>스프링 컨테이너에서 bean을 생성하고 조립한다.</li><li>필요한 bean을 가져다 써서 어플리케이션을 구현한다. </li></ol><h3 id="ApplicationContext-xml"><a href="#ApplicationContext-xml" class="headerlink" title="ApplicationContext.xml"></a>ApplicationContext.xml</h3><p>이 파일이 바로 Bean을 만들어주는 스프링 컨테이너다. 원래 객체를 생성할 때 <code>New</code>를 통해서 객체를 메모리에 로딩시킨다. 하지만 xml 파일로 Bean을 생성하면 메모리 어딘가에 스프링 컨테이너가 있고, 그곳에서 Bean이 생성되는 것이다. </p><p><img src="/img/20200319_applicationcontext.png" alt="applicationcontext.xml"></p><h3 id="Bean을-사용하는-방법"><a href="#Bean을-사용하는-방법" class="headerlink" title="Bean을 사용하는 방법"></a>Bean을 사용하는 방법</h3><p>생성된 Bean을 사용하는 법은 꽤 간단하다. </p><ol><li><code>GenericXmlApplicationContext</code>를 통해 어떤 xml을 사용할지 알려준다.</li><li><code>.getBean()</code>을 통해 컨테이너에서 생성된 Bean 중 어떤 Bean을 가져올지 알려준다.</li><li>Bean을 사용한다.</li><li>xml 파일을 통해 가져온 Bean은 외부 자원이니 반납해준다.<br><img src="/img/20200319_getBean.png" alt=".getBean"></li></ol><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://dzone.com/articles/spring-framework-tutorial-for-beginners-2">Spring Framework for Beginners</a><br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew">[인프런] 자바 스프링 프레임워크 강의</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/19/Spring-Dependency-Injection/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java HashMap</title>
      <link>https://itzjamie96.github.io/2020/03/18/Java-HashMap/</link>
      <guid>https://itzjamie96.github.io/2020/03/18/Java-HashMap/</guid>
      <pubDate>Wed, 18 Mar 2020 13:12:02 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h3 id=&quot;Java-HashMap&quot;&gt;&lt;a href=&quot;#Java-HashMap&quot; class=&quot;headerlink&quot; title=&quot;Java HashMap&quot;&gt;&lt;/a&gt;Java HashMap&lt;/h3&gt;&lt;p&gt;Arrays store items as an ordered collection and in order to access the items an index number (&lt;code&gt;int&lt;/code&gt; type) is needed. A &lt;code&gt;HashMap&lt;/code&gt; however, stores items in &lt;strong&gt;key/value&lt;/strong&gt; pairs and you can access the value using the &lt;strong&gt;key&lt;/strong&gt;. The &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; notation tells the type of object used as keys and values. &lt;/p&gt;
&lt;br&gt;

&lt;h3 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;p&gt;Create a &lt;code&gt;HashMap&lt;/code&gt; object called &lt;em&gt;capitalCities&lt;/em&gt; that will store &lt;code&gt;String&lt;/code&gt; keys and &lt;code&gt;Integer&lt;/code&gt; values: &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap; &lt;span class=&quot;comment&quot;&gt;// import the HashMap class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HashMap&amp;lt;String, String&amp;gt; capitalCities = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; 

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h3 id="Java-HashMap"><a href="#Java-HashMap" class="headerlink" title="Java HashMap"></a>Java HashMap</h3><p>Arrays store items as an ordered collection and in order to access the items an index number (<code>int</code> type) is needed. A <code>HashMap</code> however, stores items in <strong>key/value</strong> pairs and you can access the value using the <strong>key</strong>. The <code>&lt; &gt;</code> notation tells the type of object used as keys and values. </p><br><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Create a <code>HashMap</code> object called <em>capitalCities</em> that will store <code>String</code> keys and <code>Integer</code> values: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap; <span class="comment">// import the HashMap class</span></span><br><span class="line"></span><br><span class="line">HashMap&lt;String, String&gt; capitalCities = <span class="keyword">new</span> HashMap&lt;String, String&gt;();  </span><br></pre></td></tr></table></figure> <br><a id="more"></a>### Add ItemsTo add items, use the `put()` method: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">capitalCities.put(<span class="string">"Korea"</span>, <span class="string">"Seoul"</span>);</span><br><span class="line">capitalCities.put(<span class="string">"Poland"</span>, <span class="string">"Warsaw"</span>);</span><br><span class="line">capitalCities.put(<span class="string">"Germany"</span>, <span class="string">"Berlin"</span>);</span><br><span class="line">System.out.println(capitalCities);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line">&#123;Korea=Seoul, Poland=Warsaw, Germany=Berlin&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Access-an-Item"><a href="#Access-an-Item" class="headerlink" title="Access an Item"></a>Access an Item</h3><p>To access a value in the <code>HashMap</code>, use the <code>get()</code> method and <strong>refer to its key</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String city = capitalCities.get(<span class="string">"Korea"</span>);</span><br><span class="line">System.out.println(city);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line">Seoul</span><br></pre></td></tr></table></figure><br><h3 id="Remove-an-Item"><a href="#Remove-an-Item" class="headerlink" title="Remove an Item"></a>Remove an Item</h3><p>To remove an item, use the <code>remove()</code> method and <strong>refer to its key</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">capitalCities.remove(<span class="string">"Germany"</span>);</span><br><span class="line">System.out.println(capitalCities);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line">&#123;Korea=Seoul, Poland=Warsaw&#125;</span><br></pre></td></tr></table></figure><p>To remove <strong>ALL ITEMS</strong>, use the <code>clear()</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">capitalCities.clear();</span><br><span class="line">System.out.println(capitalCities);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><br><h3 id="HashMap-Size"><a href="#HashMap-Size" class="headerlink" title="HashMap Size"></a>HashMap Size</h3><p>To find out how many items there are, use the <code>size()</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> size = capitalCities.size();</span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><br><h3 id="Loop-Through-a-HashMap"><a href="#Loop-Through-a-HashMap" class="headerlink" title="Loop Through a HashMap"></a>Loop Through a HashMap</h3><p>Loop through the items with a <strong>for-each</strong> loop.<br><strong>Note:</strong> use the <code>keySet()</code> method for <strong>keys</strong>, and use the <code>values()</code> method for <strong>values</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : capitalCities.keySet()) &#123;</span><br><span class="line">    <span class="comment">// process each key in turn </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : capitalCities.values()) &#123;</span><br><span class="line">    <span class="comment">// process each value in turn </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Loop-Through-to-FIND-a-key"><a href="#Loop-Through-to-FIND-a-key" class="headerlink" title="Loop Through to FIND a key"></a>Loop Through to FIND a key</h3><p>Check if the HashMap includes a given key with <code>containsKey()</code> method: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> USA = capitalCities.containsKey(<span class="string">"USA"</span>);</span><br><span class="line">System.out.println(USA);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.dukelearntoprogram.com/course3/doc/#hashmap">Duke Learn to Program: Java Documentation</a><br><a href="https://www.w3schools.com/java/java_hashmap.asp">w3schools.com</a></p>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/18/Java-HashMap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo로 블로그를 만들어봤다</title>
      <link>https://itzjamie96.github.io/2020/03/14/I-made-a-blog-with-hexo/</link>
      <guid>https://itzjamie96.github.io/2020/03/14/I-made-a-blog-with-hexo/</guid>
      <pubDate>Sat, 14 Mar 2020 14:37:29 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h3 id=&quot;나도-블로그-만들었다&quot;&gt;&lt;a href=&quot;#나도-블로그-만들었다&quot; class=&quot;headerlink&quot; title=&quot;나도 블로그 만들었다!&quot;&gt;&lt;/a&gt;나도 블로그 만들었다!&lt;/h3&gt;&lt;p&gt;개발 공부를 시작한 이후로 수 많은 기술 블로그들을 접했다. &lt;code&gt;완전 멋있어!&lt;/code&gt;라고 생각했고 내가 만들 일은 없을 거라고 믿었다. 그런데 어느 날 나도 멋져보이고 싶었다! 그래서 호다닥 블로그 만드는 법을 검색해봤다.&lt;/p&gt;
&lt;br&gt;   

&lt;h4 id=&quot;플랫폼&quot;&gt;&lt;a href=&quot;#플랫폼&quot; class=&quot;headerlink&quot; title=&quot;플랫폼&quot;&gt;&lt;/a&gt;플랫폼&lt;/h4&gt;&lt;p&gt;보통 ‘블로그’라 하면 네이버와 티스토리가 흔히 떠오르겠지만, 내가 생각한 멋진 블로그는 우선 주소창이 &lt;code&gt;~~.github.io&lt;/code&gt;이어야 했다 (단순히 멋있기 때문). 찾아보니 Static Website Generator로 페이지를 생성하고 GitHub Pages에 배포하면 된다고 한다! 근데 또 여기서 고민: &lt;code&gt;정적 페이지는 뭘로 만들지?&lt;/code&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h3 id="나도-블로그-만들었다"><a href="#나도-블로그-만들었다" class="headerlink" title="나도 블로그 만들었다!"></a>나도 블로그 만들었다!</h3><p>개발 공부를 시작한 이후로 수 많은 기술 블로그들을 접했다. <code>완전 멋있어!</code>라고 생각했고 내가 만들 일은 없을 거라고 믿었다. 그런데 어느 날 나도 멋져보이고 싶었다! 그래서 호다닥 블로그 만드는 법을 검색해봤다.</p><br>   <h4 id="플랫폼"><a href="#플랫폼" class="headerlink" title="플랫폼"></a>플랫폼</h4><p>보통 ‘블로그’라 하면 네이버와 티스토리가 흔히 떠오르겠지만, 내가 생각한 멋진 블로그는 우선 주소창이 <code>~~.github.io</code>이어야 했다 (단순히 멋있기 때문). 찾아보니 Static Website Generator로 페이지를 생성하고 GitHub Pages에 배포하면 된다고 한다! 근데 또 여기서 고민: <code>정적 페이지는 뭘로 만들지?</code></p><a id="more"></a> <br>여러가지 정적 사이트 생성기가 있었다. <table><thead><tr><th align="left">Jekyll</th><th align="center">Hugo</th><th align="center">Hexo</th><th align="center">Gatsby</th></tr></thead><tbody><tr><td align="left">a Ruby generator built by Github for powering their Github pages</td><td align="center">an extremly fast static generator built on top of the Go programming language</td><td align="center">a fast website generator based on Node.js</td><td align="center">a blazing fast static site/PWA generator built around modern web technologies such as React and GraphQL</td></tr></tbody></table><blockquote><p><a href="https://www.techiediaries.com/jekyll-hugo-hexo/">참고: How to Choose the Right Static Generator: Jekyll vs. Hugo vs. Hexo</a></p></blockquote><p>근데 이ㅣ중에서 내가 고를 수 있는 건 <Strong>Hexo</Strong>밖에 없었다. <code>저기 있는 기술 중 node.js밖에 안써봐서ㅎ</code> 그래도 하나라도 아는 게 어딘가! 그리고 Hexo는 그 중 테마도 예쁜 게 제일 많았다! 나는 예쁜 게 좋은 사람이니 이게 제일 좋았다. </p><br><h4 id="Hexo-처음-써본-간략한-후기"><a href="#Hexo-처음-써본-간략한-후기" class="headerlink" title="Hexo 처음 써본 간략한 후기"></a>Hexo 처음 써본 간략한 후기</h4><p>내 개발실력은 “실력”이라고 할 것도 없고 그냥 이제 막 “개발”에 발가락을 담궈본 수준이다. node.js도 써본 적만 있지 잘 아는 것도 아니었다. 그 상태로 나름 따라해본다고 이것 저것 검색해보고 만든 후, 커스터마이징 하려고 테마 폴더를 열어봤는데 그냥 기절할 뻔했다. <code>하나도 모르겠어!</code> 흑흑 공부할게 아주 한참 남았구나 싶은 순간이었다. CSS도 나름 자신있다고 생각했는 데 절대 아니었다. 어디서 개발한다고 하지 말아야지…개발은 무슨 응애다. 그래도 어찌저찌 커마는 했다…<br><br></p><p><strong>결론: 뭔지 모르고 그냥 만들었다</strong></p><br><h3 id="앞으로의-계획"><a href="#앞으로의-계획" class="headerlink" title="앞으로의 계획"></a>앞으로의 계획</h3><p>사실 이름만 거창하게 기술 블로그지, 아직 남들에게 공유할 만한 기술 스택은 갖춘게 없다. 대신 지금부터라도 꾸준하게 TIL을 기록해보려고 한다. 보여주기 식이라도 꾸준히 쓰면 머릿속에 하나라도 남겠지! 최소한 마크다운은 제대로 알게 되지 않을까?ㅎ 작심삼일이 아니길 기도할 뿐…</p><br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>블로그 만들 때 참고한 자료들:<br><a href="https://www.youtube.com/watch?v=Onglr1_Kgls">YouTube DesignCourse: The Hexo Static Site (Blog) Generator - Beginner’s Crash Course</a></p><p><a href="https://www.youtube.com/watch?v=8uRgIwgumqA">YouTube 카인드패밀리: 오늘 부터 나도 github.io 블로그 운영자다!! | github pages , goormide, hexo</a></p>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/14/I-made-a-blog-with-hexo/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
