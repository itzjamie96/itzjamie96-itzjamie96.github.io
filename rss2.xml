<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>영문학도의 코딩로그</title>
    <link>https://itzjamie96.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 14 May 2020 14:59:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Java String - .equals() VS ==</title>
      <link>https://itzjamie96.github.io/2020/05/14/Java-Memory/</link>
      <guid>https://itzjamie96.github.io/2020/05/14/Java-Memory/</guid>
      <pubDate>Thu, 14 May 2020 13:00:21 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;

&lt;p&gt;Java에서 String끼리 비교할 때 &lt;code&gt;==&lt;/code&gt;는 쓰면 안된다고 한다. 의미상으로는 둘 다 &lt;del&gt;“같다”&lt;/del&gt;는 뜻인 데, 왜 &lt;code&gt;.equals()&lt;/code&gt;는 되고 &lt;code&gt;==&lt;/code&gt;는 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p>Java에서 String끼리 비교할 때 <code>==</code>는 쓰면 안된다고 한다. 의미상으로는 둘 다 <del>“같다”</del>는 뜻인 데, 왜 <code>.equals()</code>는 되고 <code>==</code>는 안되는 걸까? 그래서 알아보자! String에서 <code>.equals()</code> 와 <code>==</code>의 차이! </p><h2 id="Java의-데이터-타입"><a href="#Java의-데이터-타입" class="headerlink" title="Java의 데이터 타입"></a>Java의 데이터 타입</h2><p>Java에서 <code>Data Type</code>이란 해당 데이터가 메모리에 어떻게 저장되고, 프로그램에서 어떻게 처리되어야 하는지를 알려주는 것이다. 자바에서 타입은 크게 <del>기본형(Primitive)</del> 타입과 <del>참조형(Reference)</del> 타입이 있다.</p><h2 id="String-생성하기"><a href="#String-생성하기" class="headerlink" title="String 생성하기"></a>String 생성하기</h2><p>Java에서 가장 흔히 + 많이 쓰이는 참조형 타입은 바로 <del>String(문자열)</del>이다. <code>String</code>을 생성하는 방법은 2가지가 있다. </p><ol><li><p><code>new</code> 연산자로 생성하는 방법</p></li><li><p><code>literal</code>로 생성하는 방법 </p> <figure class="highlight java"><figcaption><span>String 생성하기</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new로 생성</span></span><br><span class="line">String a = <span class="keyword">new</span> String(<span class="string">"Hello World!"</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//literal로 생성</span></span><br><span class="line">String b = <span class="string">"Hello World!"</span>;  </span><br></pre></td></tr></tbody></table></figure></li></ol><p>여기서 차이점이 뭘까? 바로 String이 생성되는 <del>메모리의 영역</del>이다. </p><h3 id="new로-생성하는-String"><a href="#new로-생성하는-String" class="headerlink" title="new로 생성하는 String"></a>new로 생성하는 String</h3><p><code>new</code>를 통해 String을 생성하면 <code>Heap</code>영역에 존재하게 된다. 이 경우 내용물은 같아보여도 Heap에 각자 한 부분씩 자리를 잡게 된다. </p><p><img src="/img/20200514_heap.png" alt="new로 생성한 String"></p><h3 id="literal로-생성하는-String"><a href="#literal로-생성하는-String" class="headerlink" title="literal로 생성하는 String"></a>literal로 생성하는 String</h3><p>반대로 <code>literal</code>로 생성할 경우 <code>String Constant Pool</code>이라는 영역에 존재하게 된다 (이 영역도 Heap의 한 부분이긴 하다). <del>“constant = 계속되는”</del>에서 추측할 수 있듯이 이 영역에 있는 String은 계속해서 쓸 수 있다. 쉽게 말해서 <del>재활용</del>할 수 있는 것이다. </p><p><img src="/img/20200514_constant-pool.png" alt="literal로 생성한 String"></p><p>예시에서 보면 알 수 있듯이 <code>String c</code>와 <code>String d</code>는 같은 “Hello World!”를 참조한다. </p><br><h2 id="equals-VS"><a href="#equals-VS" class="headerlink" title=".equals() VS =="></a>.equals() VS ==</h2><p>그렇다면 <code>.equals()</code> 와 <code>==</code>로 돌아와보자. 이 두 기능의 차이는 뭘까?</p><ul><li><code>.equals()</code> : <del>문자</del>(character)를 비교</li><li><code>==</code> : 변수의 값(=reference)를 비교</li></ul><p><img src="/img/20200514_compare.png" alt=".equals( ) VS =="></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p><code>==</code>의 경우 변수의 값을 비교하는 데, 참조형 타입인 String의 경우 참조하는 주소가 다를 수 있기 때문에 String 끼리 비교했을 때 당연히 값이 <del>다르다</del>고 나올 수 있다. 따라서 <del>String을 비교할 때</del>는 <code>.equals()</code>를 쓰는 게 좋은 것이었다. </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/05/14/Java-Memory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java의 스택(Stack)</title>
      <link>https://itzjamie96.github.io/2020/04/23/Java-Stack/</link>
      <guid>https://itzjamie96.github.io/2020/04/23/Java-Stack/</guid>
      <pubDate>Thu, 23 Apr 2020 13:21:09 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h2 id=&quot;스택-Stack&quot;&gt;&lt;a href=&quot;#스택-Stack&quot; class=&quot;headerlink&quot; title=&quot;스택 (Stack)&quot;&gt;&lt;/a&gt;스택 (Stack)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Stack&lt;/code&gt;은 제한적으로 접근할 수 있는 구조다. 한 쪽 끝에서만 데이터를 넣거나 뺄 수 있는 구조로, 가장 나중에 넣은 데이터를 가장 먼저 빼낼 수 있다. 이게 바로 &lt;del&gt;LIFO: Last In First Out&lt;/del&gt; 자료구조다. &lt;/p&gt;
&lt;p&gt;가장 대표적인 예시는 &lt;code&gt;프링글스&lt;/code&gt;인 것 같다. 윈기둥 형태의 프링글스 통에는 과자가 빽빽히 들어있다. 과자를 한 조각 꺼내 먹으려면 맨 위에 있는 조각부터 꺼내게 된다. 통에 가장 처음 넣어진 과자는 바닥 쪽에 있고, 맨 마지막으로 통에 넣어진 조각이 가장 처음 꺼내지게 된다. 이것은 FILO:First In Last Out이기도 한, 결국 완벽한 스택이다. &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h2 id="스택-Stack"><a href="#스택-Stack" class="headerlink" title="스택 (Stack)"></a>스택 (Stack)</h2><p><code>Stack</code>은 제한적으로 접근할 수 있는 구조다. 한 쪽 끝에서만 데이터를 넣거나 뺄 수 있는 구조로, 가장 나중에 넣은 데이터를 가장 먼저 빼낼 수 있다. 이게 바로 <del>LIFO: Last In First Out</del> 자료구조다. </p><p>가장 대표적인 예시는 <code>프링글스</code>인 것 같다. 윈기둥 형태의 프링글스 통에는 과자가 빽빽히 들어있다. 과자를 한 조각 꺼내 먹으려면 맨 위에 있는 조각부터 꺼내게 된다. 통에 가장 처음 넣어진 과자는 바닥 쪽에 있고, 맨 마지막으로 통에 넣어진 조각이 가장 처음 꺼내지게 된다. 이것은 FILO:First In Last Out이기도 한, 결국 완벽한 스택이다. </p><a id="more"></a><br><h2 id="스택-생성"><a href="#스택-생성" class="headerlink" title="스택 생성"></a>스택 생성</h2><p>스택을 생성하기 위해서 먼저 <code>java.util.Stack</code> 패키지가 import되야 한다. Import한 후 스택을 생성해보자.</p><figure class="highlight java"><figcaption><span>스택 생성</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Type&gt; stacks = <span class="keyword">new</span> Stack&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><p><code>&lt;Type&gt;</code>에는 해당 스택이 어떤 타입의 데이터를 담을 것인지 지정해주면 된다. </p><figure class="highlight java"><figcaption><span>스택 타입</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정수 스택!</span></span><br><span class="line">Stack&lt;Integer&gt; stacks = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문자열 스택!</span></span><br><span class="line">Stack&lt;String&gt; stacks = <span class="keyword">new</span> Stack&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><br><h2 id="스택의-메서드"><a href="#스택의-메서드" class="headerlink" title="스택의 메서드"></a>스택의 메서드</h2><p>스택에는 총 5가지의 메서드가 있다. </p><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>스택에 데이터를 추가하기 위해서는 <code>push()</code> 메서드를 쓴다. </p><figure class="highlight java"><figcaption><span>push()</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Stack&lt;String&gt; animals= <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add elements to Stack</span></span><br><span class="line">        animals.push(<span class="string">"Dog"</span>);</span><br><span class="line">        animals.push(<span class="string">"Horse"</span>);</span><br><span class="line">        animals.push(<span class="string">"Cat"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Stack: "</span> + animals);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><figcaption><span>Console</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [Dog, Horse, Cat]</span><br></pre></td></tr></tbody></table></figure><p>결과창에서 볼 수 있듯이 <del>가장 먼저</del> push한 “Dog”가 스택의 맨 처음에 있다. </p><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>스택의 맨 마지막 요소를 없애기 위해서는 <code>pop()</code> 메서드를 쓴다. 참고로 맨 마지막 요소는 사실 상 스택의 맨 꼭대기에 있는 요소이기 때문에 <code>top</code>이라고 부른다. </p><figure class="highlight java"><figcaption><span>pop()</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Stack&lt;String&gt; animals= <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add elements to Stack</span></span><br><span class="line">        animals.push(<span class="string">"Dog"</span>);</span><br><span class="line">        animals.push(<span class="string">"Horse"</span>);</span><br><span class="line">        animals.push(<span class="string">"Cat"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Initial Stack: "</span> + animals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove element stacks</span></span><br><span class="line">        String element = animals.pop();</span><br><span class="line">        System.out.println(<span class="string">"Removed Element: "</span> + element);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><figcaption><span>Console</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Initial Stack: [Dog, Horse, Cat]</span><br><span class="line">Removed Element: Cat</span><br></pre></td></tr></tbody></table></figure><h3 id="peek"><a href="#peek" class="headerlink" title="peek()"></a>peek()</h3><p>스택의 맨 마지막 요소를 보고싶을 땐 <code>peek()</code> 메서드를 쓴다. </p><figure class="highlight java"><figcaption><span>peek()</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Stack&lt;String&gt; animals= <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add elements to Stack</span></span><br><span class="line">        animals.push(<span class="string">"Dog"</span>);</span><br><span class="line">        animals.push(<span class="string">"Horse"</span>);</span><br><span class="line">        animals.push(<span class="string">"Cat"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Stack: "</span> + animals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Access element from the top</span></span><br><span class="line">        String element = animals.peek();</span><br><span class="line">        System.out.println(<span class="string">"Element at top: "</span> + element);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><figcaption><span>Console</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stack: [Dog, Horse, Cat]</span><br><span class="line">Element at top: Cat</span><br></pre></td></tr></tbody></table></figure><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p>스택의 내용물은 아는 데, 위치를 알고 싶다면? 그럴 때는 <code>search()</code> 메서드를 쓰자. </p><figure class="highlight java"><figcaption><span>Search()</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Stack&lt;String&gt; animals= <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add elements to Stack</span></span><br><span class="line">        animals.push(<span class="string">"Dog"</span>);</span><br><span class="line">        animals.push(<span class="string">"Horse"</span>);</span><br><span class="line">        animals.push(<span class="string">"Cat"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Stack: "</span> + animals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search an element</span></span><br><span class="line">        <span class="keyword">int</span> position = animals.search(<span class="string">"Horse"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Position of Horse: "</span> + position);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><figcaption><span>Console</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stack: [Dog, Horse, Cat]</span><br><span class="line">Position of Horse: <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h3><p>스택이 비었을까 안비었을까? 확인하려면 <code>empty()</code>를 통해 알아보자. 스택이 비었다면 <code>True</code>, 내용물이 하나라도 있다면 <code>False</code>를 리턴해준다. </p><figure class="highlight java"><figcaption><span>empty()</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Stack&lt;String&gt; animals= <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add elements to Stack</span></span><br><span class="line">        animals.push(<span class="string">"Dog"</span>);</span><br><span class="line">        animals.push(<span class="string">"Horse"</span>);</span><br><span class="line">        animals.push(<span class="string">"Cat"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Stack: "</span> + animals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if stack is empty</span></span><br><span class="line">        <span class="keyword">boolean</span> result = animals.empty();</span><br><span class="line">        System.out.println(<span class="string">"Is the stack empty? "</span> + result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><figcaption><span>Console</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stack: [Dog, Horse, Cat]</span><br><span class="line">Is the stack empty? <span class="keyword">false</span></span><br></pre></td></tr></tbody></table></figure><p>다음엔 스택을 이용해서 알고리즘을 풀어볼 예정이다. 기억하자 프링글스!</p><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.programiz.com/java-programming/stack">[Programiz] Java Stack Class</a><br><a href="http://tutorials.jenkov.com/java-collections/stack.html">[Jenkov Tutorials] Java Stack</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/04/23/Java-Stack/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java에서 Interface(인터페이스)를 Implement한다는 건</title>
      <link>https://itzjamie96.github.io/2020/04/01/Java-Implement-an-Interface/</link>
      <guid>https://itzjamie96.github.io/2020/04/01/Java-Implement-an-Interface/</guid>
      <pubDate>Tue, 31 Mar 2020 15:21:18 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;p&gt;개발을 공부하다 보면 영어 단어를 들리는 그대로 우리말로 옮겨서 사용하는 경우가 많다. 보통 그 단어를 알면 개념을 이해하기 수월한데, (ex. map) 가끔 영어로도 모르는 단어가 있으면 공부하다 너무 헷갈린다. 대표적인 예가 &lt;code&gt;Interface&lt;/code&gt;다. 특히 어떤 클래스가 인터페이스를 &lt;code&gt;implement&lt;/code&gt; 한다는 게 너무 헷갈려서 정리해본다. &lt;/p&gt;
&lt;h2 id=&quot;Interface란&quot;&gt;&lt;a href=&quot;#Interface란&quot; class=&quot;headerlink&quot; title=&quot;Interface란?&quot;&gt;&lt;/a&gt;Interface란?&lt;/h2&gt;&lt;p&gt;Interface의 사전적 의미를 살펴보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;서로 다른 두 개의 시스템, 장치 사이에서 정보나 신호를 주고받는 경우의 접점이나 경계면이다. 즉, 사용자가 기기를 쉽게 동작시키는데 도움을 주는 시스템을 의미한다.&lt;br&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%8C%85)&quot;&gt;출처: 위키백과&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p>개발을 공부하다 보면 영어 단어를 들리는 그대로 우리말로 옮겨서 사용하는 경우가 많다. 보통 그 단어를 알면 개념을 이해하기 수월한데, (ex. map) 가끔 영어로도 모르는 단어가 있으면 공부하다 너무 헷갈린다. 대표적인 예가 <code>Interface</code>다. 특히 어떤 클래스가 인터페이스를 <code>implement</code> 한다는 게 너무 헷갈려서 정리해본다. </p><h2 id="Interface란"><a href="#Interface란" class="headerlink" title="Interface란?"></a>Interface란?</h2><p>Interface의 사전적 의미를 살펴보자.</p><blockquote><p>서로 다른 두 개의 시스템, 장치 사이에서 정보나 신호를 주고받는 경우의 접점이나 경계면이다. 즉, 사용자가 기기를 쉽게 동작시키는데 도움을 주는 시스템을 의미한다.<br><a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%8C%85)">출처: 위키백과</a></p></blockquote><a id="more"></a><p>이 의미를 Java의 <code>Interface</code>에 대입하면 “어떤 객체를 쉽게 구현하기 위해 도와주는 클래스”라고 생각하면 될 것 같다. 흔히 보이는 인터페이스는 어떤 객체와 연관된 메소드들이 모여있는 구조다. 다만, 메소드에 <del>구현부가 없다</del>.</p><figure class="highlight java"><figcaption><span>Interface Example</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bicycle</span> </span>{</span><br><span class="line">    <span class="comment">//method signatures</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeGear</span><span class="params">(<span class="keyword">int</span> newValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speedUp</span><span class="params">(<span class="keyword">int</span> increment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">applyBrakes</span><span class="params">(<span class="keyword">int</span> decrement)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <br><p>실제로 인터페이스는 상수, method signiture, default method, static method, 중첩 클래스만 가질 수 있다. 앞서 말한 흔한 인터페이스의 구조는 method signature (메소드 이름 + 파라미터)만 가지고 있는 형태다. </p><blockquote><p>Java 8부터 <code>default</code>와 <code>static</code> 키워드가 추가되었다. 기존에는 인터페이스에서 메소드가 어떤 기능을 하는지 구구절절 알려주는 구현부를 쓸 수 없었는데 이제부터는 <code>default</code>나 <code>static</code> 키워드로 선언하면 <del>구현부를 써도 된다</del>. Default나 static 메소드는 따로 오버라이딩하지 않아도 사용할 수 있다고 한다! 더 자세한 건 <a href="https://programmers.co.kr/learn/courses/5/lessons/241">프로그래머스</a>의 설명을 보는 게 좋을 것 같다. </p></blockquote><p>구현부가 없다 보니 인터페이스는 객체화(instantiate) 할 수 없다 (무슨 기능을 해야하는지 안적혀 있으니 당연한 것 같다). 따라서 인터페이스를 사용하려면 다른 클래스가 <code>implement</code> 하거나 <code>extend</code> 해줘야 한다.</p><h2 id="Implement하다"><a href="#Implement하다" class="headerlink" title="Implement하다?"></a>Implement하다?</h2><p>나는 인터페이스를 <code>implement</code> 한다는 게 제일 헷갈렸다. 내가 아는 implement의 정의는 “실행하다” 밖에 없었기 때문이다. 그러다 찾은 <code>implement</code>의 IT적 의미:</p><blockquote><p>To begin to use a new system<br><a href="https://dictionary.cambridge.org/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4/implement">출처: Cambridge Dictionary</a></p></blockquote><p>결국 <del>“사용한다”</del>라는 뜻이었다! </p><h2 id="Implement-an-Interface"><a href="#Implement-an-Interface" class="headerlink" title="Implement an Interface"></a>Implement an Interface</h2><p>어떤 클래스가 인터페이스를 <code>implement</code>하게 되면 그제서야 오버라이딩을 통해 인터페이스에 있는 메소드들을의 구현부를 쓸 수 있게 된다. </p><figure class="highlight java"><figcaption><span>Implement Interface Example</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SamChunRiBicycle</span> <span class="keyword">implements</span> <span class="title">Bicycle</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> gear = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeGear</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>{</span><br><span class="line">         gear = newValue;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speedUp</span><span class="params">(<span class="keyword">int</span> increment)</span> </span>{</span><br><span class="line">         speed = speed + increment;   </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">applyBrakes</span><span class="params">(<span class="keyword">int</span> decrement)</span> </span>{</span><br><span class="line">         speed = speed - decrement;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStates</span><span class="params">()</span> </span>{</span><br><span class="line">         System.out.println(<span class="string">"cadence:"</span> +cadence + <span class="string">" speed:"</span> </span><br><span class="line">            + speed + <span class="string">" gear:"</span> + gear);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <h2 id="자료형으로써의-인터페이스"><a href="#자료형으로써의-인터페이스" class="headerlink" title="자료형으로써의 인터페이스"></a>자료형으로써의 인터페이스</h2><p>인터페이스의 가장 큰 목적은 여러 클래스들이 공통 속성을 가질 때 그 속성을 하나의 그룹으로 압축(?)하기 위해서인 것 같다. 이건 <code>List</code> 인터페이스를 보면 이해가 딱 된다.<br><img src="/img/20200401_Java-list-interface.png" alt="Collections framework"></p><p><code>ArrayList</code>, <code>LinkedList</code>, <code>Stack</code>, <code>Vector</code> 모두 클래스인데, <code>List</code>를 <code>implement</code>하고 오버라이딩 해서 공통된 리스트 속성을 가지지만 각자 다른 클래스들이 나오는 것이다!🙌 이래서 인터페이스를 정의한다는 것은 새로운 참조형 (reference data type)을 만드는 것과 같다고 하나보다. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html">Oracle Java Documentation: What Is an Interface?</a><br><a href="https://docs.oracle.com/javase/tutorial/java/IandI/interfaceAsType.html">Oracle Java Documentation: Using an Interface as a Type</a><br><a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html">Java Api: Interface List<e></e></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/04/01/Java-Implement-an-Interface/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Bean의 범위 - Singleton과 Prototype</title>
      <link>https://itzjamie96.github.io/2020/03/25/Spring-bean-scope/</link>
      <guid>https://itzjamie96.github.io/2020/03/25/Spring-bean-scope/</guid>
      <pubDate>Wed, 25 Mar 2020 13:57:58 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h2 id=&quot;Bean의-범위-scope&quot;&gt;&lt;a href=&quot;#Bean의-범위-scope&quot; class=&quot;headerlink&quot; title=&quot;Bean의 범위(scope)&quot;&gt;&lt;/a&gt;Bean의 범위(scope)&lt;/h2&gt;&lt;p&gt;스프링에서 생성되는 bean의 범위(scope)란, 사실상 bean의 생명주기와 같다. 말 그대로 bean이 생성될 때부터 소멸할 때까지의 범위를 의미한다. 스프링은 기본적으로 모든 bean을 &lt;del&gt;Singleton&lt;/del&gt;으로 생성해서 관리한다. 그렇다면 singleton이 대체 무엇인가?&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Singleton&quot;&gt;&lt;a href=&quot;#Singleton&quot; class=&quot;headerlink&quot; title=&quot;Singleton&quot;&gt;&lt;/a&gt;Singleton&lt;/h2&gt;&lt;p&gt;우선 단어에서 대충 감이 잡힌다. &lt;del&gt;Single&lt;/del&gt;ton. &lt;del&gt;SINGLE!&lt;/del&gt; 단어 자체에서 유추할 수 있다시피 singleton은 스프링 컨테이너에서 bean이 생성될 때 그 bean을 딱! &lt;del&gt;한 개&lt;/del&gt;만 생성한다. 따라서 그 bean을 사용하는 모든 request는 해당 bean만 참조하게 된다. &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h2 id="Bean의-범위-scope"><a href="#Bean의-범위-scope" class="headerlink" title="Bean의 범위(scope)"></a>Bean의 범위(scope)</h2><p>스프링에서 생성되는 bean의 범위(scope)란, 사실상 bean의 생명주기와 같다. 말 그대로 bean이 생성될 때부터 소멸할 때까지의 범위를 의미한다. 스프링은 기본적으로 모든 bean을 <del>Singleton</del>으로 생성해서 관리한다. 그렇다면 singleton이 대체 무엇인가?<br><br></p><h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><p>우선 단어에서 대충 감이 잡힌다. <del>Single</del>ton. <del>SINGLE!</del> 단어 자체에서 유추할 수 있다시피 singleton은 스프링 컨테이너에서 bean이 생성될 때 그 bean을 딱! <del>한 개</del>만 생성한다. 따라서 그 bean을 사용하는 모든 request는 해당 bean만 참조하게 된다. </p><a id="more"></a><blockquote><p>  Singleton의 사전적 정의를 보면 내가 생각했던 싱글이 맞는 것 같다!<br>    1. (단독) 개체<br>    2. 독신자 (결혼을 안 했거나 애인이 없는 사람)<br>    3. (쌍둥이가 아닌) 외둥이<br>출처: 네이버 영어사전</p></blockquote><p>기존의 Java 프로젝트에서는 <code>new</code>를 통해 새로운 객체를 생성했는데, 같은 이름을 가진 새로운 객체들을 여러 개 생성할 수 있었다. </p><figure class="highlight java"><figcaption><span>new를 통한 객체 생성 예시</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Shape s1 = <span class="keyword">new</span> Shape();</span><br><span class="line">Shape s2 = <span class="keyword">new</span> Shape();</span><br><span class="line">Shape s3 = <span class="keyword">new</span> Shape();</span><br><span class="line"></span><br><span class="line">System.out.println(s1);    </span><br><span class="line">System.out.println(s2);     </span><br><span class="line">System.out.println(s3);   </span><br></pre></td></tr></tbody></table></figure><blockquote><p>결과:<br>test01.Shape@573f2bb1<br>test01.Shape@5ae9a829<br>test01.Shape@6d8a00e3</p></blockquote><p>볼 수 있다시피 3개의 각기 다른 객체가 생성됐기 때문에 <del>주소가 모두 다른</del> 것을 알 수 있다. </p><p>이와 반대로 singleton은 스프링 컨테이너에서 bean을 <del>딱 한 개!</del>만 생성하기 때문에 <code>.getBean()</code>을 딱 하나의 bean만 참조하게 된다. </p><figure class="highlight java"><figcaption><span>Singleton Bean</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Shape sq1 = ctx.getBean(<span class="string">"square"</span>, Shape<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Shape sq2 = ctx.getBean(<span class="string">"square"</span>, Shape<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Shape sq3 = ctx.getBean(<span class="string">"square"</span>, Shape<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(sq1);</span><br><span class="line">System.out.println(sq2);</span><br><span class="line">System.out.println(sq3); </span><br></pre></td></tr></tbody></table></figure><blockquote><p>결과:<br>test01.Shape@573f2bb1<br>test01.Shape@573f2bb1<br>test01.Shape@573f2bb1</p></blockquote><p>결과에서 알 수 있다시피 각 객체마다 하나의 bean을 참조하고 있다. </p><br><h2 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h2><p>기본적으로 스프링에서 bean을 불러오면 매번 같은 객체를 반환한다. 하지만 가끔 하나의 bean으로 여러 객체를 만들어 사용해야할 때가 있다 (마치 <code>new</code>를 쓰는 것 처럼). 이럴 땐 <del>Prototype</del>으로 설정해주면 된다.</p><p>Prototype으로 bean을 설정하는 방법은 다음과 같다. </p><figure class="highlight"><figcaption><span>ApplicationContext.xml</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class="com.shape.sqaure" scope="prototype"&gt;&lt;/bean&gt;</span><br></pre></td></tr></tbody></table></figure><p>위와 같이 XML 파일에서 <code>scope=prototype</code>을 설정해 주면 된다. 혹은 어노테이션을 통해 bean의 범위를 설정해줄 수도 있다. </p><figure class="highlight java"><figcaption><span>Square.class</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>대부분의 경우 <code>new</code>로 객체를 생성하면 되지만, 스프링 컨테이너의 DI 기능을 사용하고 싶은 경우에 Prototype scope bean을 설정한다고 한다. </p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew">[인프런] 자바 스프링 프레임워크 강의</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/25/Spring-bean-scope/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring 의존객체 자동주입</title>
      <link>https://itzjamie96.github.io/2020/03/23/Spring-Auto-DI/</link>
      <guid>https://itzjamie96.github.io/2020/03/23/Spring-Auto-DI/</guid>
      <pubDate>Mon, 23 Mar 2020 07:28:08 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h2 id=&quot;의존객체-자동-주입&quot;&gt;&lt;a href=&quot;#의존객체-자동-주입&quot; class=&quot;headerlink&quot; title=&quot;의존객체 자동 주입&quot;&gt;&lt;/a&gt;의존객체 자동 주입&lt;/h2&gt;&lt;p&gt;의존객체 자동 주입이란, Spring 2.5부터 생긴 기능으로 &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt; 등의 태그로 의존 대상 객체를 명시하지 않아도 스프링 컨테이너가 자동으로 필요한 의존 대상 객체를 찾아서 객체가 필요한 객체에 주입해주는 기능이다. 구현할 때는 &lt;code&gt;@Autowired&lt;/code&gt; 와 &lt;code&gt;@Resource&lt;/code&gt; 어노테이션을 이용한다. &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h2 id="의존객체-자동-주입"><a href="#의존객체-자동-주입" class="headerlink" title="의존객체 자동 주입"></a>의존객체 자동 주입</h2><p>의존객체 자동 주입이란, Spring 2.5부터 생긴 기능으로 <code>&lt;constructor-arg&gt;</code> 또는 <code>&lt;property&gt;</code> 등의 태그로 의존 대상 객체를 명시하지 않아도 스프링 컨테이너가 자동으로 필요한 의존 대상 객체를 찾아서 객체가 필요한 객체에 주입해주는 기능이다. 구현할 때는 <code>@Autowired</code> 와 <code>@Resource</code> 어노테이션을 이용한다. </p><a id="more"></a><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p><code>@Autowired</code>는 스프링 컨테이너에 있는 Bean 중 <del>타입이 일치</del>하는 Bean을 자동으로 주입해준다. 사용하기 위해서는 다음의 두 가지만 적어주면 된다.</p><ol><li>자동 주입 대상에 @Autowired 어노테이션 사용</li><li>XML 파일에 <code>&lt;context:annotation-config/&gt;</code> 추가</li></ol><p>예시를 살펴보면 다음과 같다.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordRegisterService</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> WordDao wordDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">wordRegisterService</span><span class="params">(WordDao wordDao)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.wordDao = wordDao;</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>이렇게 Service 클래스의 생성자에 @Autowired를 달아주면, xml 파일에서 타입이 <code>WordDao</code>인 Bean을 찾아서 생성자에 자동으로 주입해준다. </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;context:annotaion-config /&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"wordDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.word.dao.WordDao"</span>/&gt;   <span class="comment">//이걸 주입한다!</span></span><br><span class="line">&lt;bean id=<span class="string">"registerService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.word.service.WordRegisterService"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"searchService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.word.service.WordSearchService"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>참고로 이렇게 생성자에 @Autowired 어노테이션을 쓰는 것은 상관이 없지만, 다른 메소드에 쓰기 위해서는 기본 생성자가 필수다. </p></blockquote><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p><code>@Resource</code> 어노테이션은 스프링 컨테이너에 있는 Bean 중에서 <del>이름이 일치</del>하는 Bean을 찾아서 주입해준다. 다만 @Autowired와는 달리 <del>property나 메소드</del>에만 사용이 가능하다. 그렇기 때문에 기본 생성자가 필수다 (객체가 일단 생성이 돼야 주입이든 뭐든 할 수 있다). </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordRegisterService</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WordDao wordDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//기본 생성자</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">wordRegisterService</span><span class="params">()</span> </span>{  }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">wordRegisterService</span><span class="params">(WordDao wordDao)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.wordDao = wordDao;</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>위와 같이 @Resource를 달아주면 xml 파일에서 이름이 <code>wordDao</code>인 Bean을 찾게 된다. </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;context:annotaion-config /&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"wordDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.word.dao.WordDao"</span>/&gt;   </span><br><span class="line"><span class="comment">//id가 wordDao = 이름 일치!</span></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p><br></p><hr><p></p><h2 id="의존-객체-선택"><a href="#의존-객체-선택" class="headerlink" title="의존 객체 선택"></a>의존 객체 선택</h2><p>@Autowired 어노테이션은 타입이 일치하는 Bean을 자동 주입한다고 배웠다. 근데 만약 동일한 타입을 가진 Bean이 <del>두 개 이상</del>이라면 @Autowired 어노테이션은 어떻게 작동할까? 당연히 어떤 Bean을 주입해야하는 지 알 수 없어서 Exception이 발생한다. 이럴 때는 <del>@Qualifier</del> 어노테이션을 이용해 특정 Bean을 지정해줄 수 있다.</p><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>@Qualifier 어노테이션을 사용하기 위해서는 두 가지를 해주면 된다.</p><ol><li>XMl 파일에 <code>&lt;qualifier value="valueName"&gt;</code>를 통해 특정 이름 정해주기</li><li>@Autowired 밑에 <code>@Qualifier("valueName")</code> 적어주기</li></ol><figure class="highlight java"><figcaption><span>XML파일</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"wordDao1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.word.dao.WordDao"</span>&gt;  </span><br><span class="line">    &lt;qualifier value=<span class="string">"usedDao"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"wordDao2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.word.dao.WordDao"</span>/&gt;   </span><br><span class="line">&lt;bean id=<span class="string">"wordDao3"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.word.dao.WordDao"</span>/&gt;   </span><br></pre></td></tr></tbody></table></figure><p>XML 파일에 wordDao타입이 3개 정도 있다. 여기서 특정 Bean에 <code>&lt;qualifier&gt;</code> 태그를 통해 <code>"usedDao"</code>라는 이름을 정해주면 이 이름을 가진 bean을 자동 주입하게 된다. </p><figure class="highlight java"><figcaption><span>Service 클래스</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordRegisterService</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> WordDao wordDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"usedDao"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">wordRegisterService</span><span class="params">(WordDao wordDao)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.wordDao = wordDao;</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.baeldung.com/spring-autowire">[Baeldung] Guide to Spring @Autowired</a><br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew">[인프런] 자바 스프링 프레임워크 강의</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/23/Spring-Auto-DI/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring의 DI</title>
      <link>https://itzjamie96.github.io/2020/03/20/Spring-DI/</link>
      <guid>https://itzjamie96.github.io/2020/03/20/Spring-DI/</guid>
      <pubDate>Fri, 20 Mar 2020 13:09:02 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h2 id=&quot;Dependency-Injection-의존성-주입&quot;&gt;&lt;a href=&quot;#Dependency-Injection-의존성-주입&quot; class=&quot;headerlink&quot; title=&quot;Dependency Injection (의존성 주입)&quot;&gt;&lt;/a&gt;Dependency Injection (의존성 주입)&lt;/h2&gt;&lt;p&gt;스프링에서 의존성 주입이란, 말 그대로 필요한 객체를 주입한다는 뜻이다. 좀 더 쉽게 살펴보기 위해 &lt;del&gt;건전지를 넣어야하는 장난감&lt;/del&gt;을 예제로 들어보자. 장난감이 작동하기 위해서는 배터리가 필수다. 다시 말해 &lt;del&gt;장난감이 배터리에 의존&lt;/del&gt;하기 때문에 &lt;del&gt;배터리를 장난감에 주입&lt;/del&gt;해야 한다. &lt;/p&gt;
&lt;p&gt;먼저 건전지를 분리할 수 없는 배터리 일체형 장난감을 생각해보자.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElectricToyCar&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Battery battery;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElectricToyCar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        battery = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Battery();    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//공장에서 장난감을 만들 때 배터리를 주입한 상태로 만든다!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h2 id="Dependency-Injection-의존성-주입"><a href="#Dependency-Injection-의존성-주입" class="headerlink" title="Dependency Injection (의존성 주입)"></a>Dependency Injection (의존성 주입)</h2><p>스프링에서 의존성 주입이란, 말 그대로 필요한 객체를 주입한다는 뜻이다. 좀 더 쉽게 살펴보기 위해 <del>건전지를 넣어야하는 장난감</del>을 예제로 들어보자. 장난감이 작동하기 위해서는 배터리가 필수다. 다시 말해 <del>장난감이 배터리에 의존</del>하기 때문에 <del>배터리를 장난감에 주입</del>해야 한다. </p><p>먼저 건전지를 분리할 수 없는 배터리 일체형 장난감을 생각해보자.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricToyCar</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Battery battery;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ElectricToyCar</span><span class="params">()</span> </span>{</span><br><span class="line">        battery = <span class="keyword">new</span> Battery();    </span><br><span class="line">        <span class="comment">//공장에서 장난감을 만들 때 배터리를 주입한 상태로 만든다!</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>위의 코드와 같이 배터리 일체형 장난감은 생성자에서 배터리를 주입하게 되고, 이외에는 배터리를 주입할 수 있는 방법이 없다. </p><p>반대로 건전지를 분리할 수 있는 분리형 장난감을 생각해보자. </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricToyRadio</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Battery battery;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ElectricToyRadio</span><span class="params">(Battery battery)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.battery  = battery;    </span><br><span class="line">        <span class="comment">//공장에서 장난감을 만들 때 기본적으로 배터리를 하나 넣어줌</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBattery</span><span class="params">(Battery battery)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.battery = battery;     </span><br><span class="line">        <span class="comment">//생성 후 setter를 통해서 배터리 주입 가능!</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>위와 같이 배터리 분리형은 배터리가 다 떨어졌을 때 배터리만 따로 교체하면 된다. 이렇게 필요한 객체를 주입하는 것을 DI, 의존성 주입이라고 한다. </p><br><h2 id="스프링에서-DI-설정-방법"><a href="#스프링에서-DI-설정-방법" class="headerlink" title="스프링에서 DI 설정 방법"></a>스프링에서 DI 설정 방법</h2><ol><li>생성자를 이용한 DI<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StudentRegisterService</span><span class="params">(StudentDao studentDao)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.studentDao = studentDao; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><code>&lt;constructor-arg ref="BEAN NAME"/&gt;</code> tag로 생성자에 다른 bean을 refer하게 만든다. <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id= "studentDao" class = "ems.member.dao.StudentDao" &gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id= <span class="string">"registerService"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"ems.member.service.StudentRegisterService"</span>&gt;</span><br><span class="line">    &lt;constructor-arg ref= "studentDao" &gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>construct-arg : 생성자</li><li>ref: 주입할 객체 아이디</li></ul></li></ol><br><ol start="2"><li>setter를 이용한 DI<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcUrl</span><span class="params">(String jdbcUrl)</span> </span>{ </span><br><span class="line">    <span class="keyword">this</span>.jdbcUrl = jdbcUrl; </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>{ </span><br><span class="line">    <span class="keyword">this</span>.userId = userId; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPw</span><span class="params">(String userPw)</span> </span>{ </span><br><span class="line">    <span class="keyword">this</span>.userPw = userPw; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><code>&lt;property&gt;</code> tag의 <code>name</code>과 <code>value</code>를 통해 특정 setter를 지정해서 사용한다. <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id= <span class="string">"dataBaseConnectionInfoDev"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"ems.member.DataBaseConnectionInfo"</span> &gt; </span><br><span class="line">    &lt;property name= <span class="string">"jdbcUrl"</span> value = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span> /&gt; </span><br><span class="line">    &lt;property name= <span class="string">"userId"</span> value = <span class="string">"scott"</span> /&gt; &lt;property name= <span class="string">"userPw"</span> value = <span class="string">"tiger"</span> /&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>name: setter에서 쓰는 이름 가져오기 (소문자로 시작!)</li><li>value: 파라미터로 들어오는 값 적어주기</li></ul></li></ol><br><ol start="3"><li>List타입의 DI<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDevelopers</span><span class="params">(List&lt;String&gt; developers)</span> </span>{ </span><br><span class="line">    <span class="keyword">this</span>.developers = developers; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><code>&lt;list&gt;</code> tag를 통해 값들을 지정해준다.<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name= <span class="string">"developers"</span> &gt; </span><br><span class="line">    &lt;list&gt; </span><br><span class="line">        &lt;value&gt;Cheney.&lt;/value&gt; </span><br><span class="line">        &lt;value&gt;Eloy.&lt;/value&gt; </span><br><span class="line">        &lt;value&gt;Jasper.&lt;/value&gt; </span><br><span class="line">        &lt;value&gt;Dillon.&lt;/value&gt; </span><br><span class="line">        &lt;value&gt;Kian.&lt;/value&gt; </span><br><span class="line">    &lt;/list&gt; </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>value: list 안에 들어있는 값</li></ul></li></ol><br><ol start="4"><li>Map타입의 DI<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdministrators</span><span class="params">(Map&lt;String, String&gt; administrators)</span> </span>{ </span><br><span class="line">    <span class="keyword">this</span>.administrators = administrators; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><code>&lt;map&gt;</code> –&gt; <code>&lt;entry&gt;</code> –&gt; <code>&lt;key&gt;</code> tag를 통해 값들을 지정해준다.<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name= <span class="string">"administrators"</span> &gt; </span><br><span class="line">    &lt;map&gt; </span><br><span class="line">        &lt;entry&gt; </span><br><span class="line">            &lt;key&gt; </span><br><span class="line">                &lt;value&gt;Cheney&lt;/value&gt; </span><br><span class="line">            &lt;/key&gt; </span><br><span class="line">                &lt;value&gt;cheney@springPjt.org&lt;/value&gt; </span><br><span class="line">        &lt;/entry&gt; </span><br><span class="line">        &lt;entry&gt; </span><br><span class="line">            &lt;key&gt; </span><br><span class="line">                &lt;value&gt;Jasper&lt;/value&gt; </span><br><span class="line">            &lt;/key&gt; </span><br><span class="line">                &lt;value&gt;jasper@springPjt.org&lt;/value&gt; </span><br><span class="line">        &lt;/entry&gt; </span><br><span class="line">    &lt;/map&gt; </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew">[인프런] 자바 스프링 프레임워크 강의</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/20/Spring-DI/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Framework 개요</title>
      <link>https://itzjamie96.github.io/2020/03/19/Spring-Framework/</link>
      <guid>https://itzjamie96.github.io/2020/03/19/Spring-Framework/</guid>
      <pubDate>Thu, 19 Mar 2020 11:02:51 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h2 id=&quot;Spring-Framework&quot;&gt;&lt;a href=&quot;#Spring-Framework&quot; class=&quot;headerlink&quot; title=&quot;Spring Framework&quot;&gt;&lt;/a&gt;Spring Framework&lt;/h2&gt;&lt;p&gt;Spring Framework는 Java 어플리케이션을 쉽고 빠르게 개발할 수 있도록 도와주는 &lt;del&gt;오픈 소스 프레임워크&lt;/del&gt;다. 스프링은 &lt;del&gt;lightweight = 경량&lt;/del&gt;  프레임워크로, Java 어플리케이션을 개발할 때 필요한 다양한 모듈을 제공한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여기서 모듈이란 프로그램을 구성하는 &lt;del&gt;구성 요소&lt;/del&gt;다. 기계에서 &lt;del&gt;부품&lt;/del&gt;이라고 생각하면 될 것 같다.&lt;br&gt;어떤 프로그램을 기능별로 나눈 후, 그 기능들을 다른 프로그램에 쓸 수 있다 = 모듈! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;스프링에서 제공하는 모듈:&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><p>Spring Framework는 Java 어플리케이션을 쉽고 빠르게 개발할 수 있도록 도와주는 <del>오픈 소스 프레임워크</del>다. 스프링은 <del>lightweight = 경량</del>  프레임워크로, Java 어플리케이션을 개발할 때 필요한 다양한 모듈을 제공한다.</p><blockquote><p>여기서 모듈이란 프로그램을 구성하는 <del>구성 요소</del>다. 기계에서 <del>부품</del>이라고 생각하면 될 것 같다.<br>어떤 프로그램을 기능별로 나눈 후, 그 기능들을 다른 프로그램에 쓸 수 있다 = 모듈! </p></blockquote><br><p>스프링에서 제공하는 모듈: <a id="more"></a></p><table><thead><tr><th>Modules</th><th>Features</th></tr></thead><tbody><tr><td>spring-core</td><td>스프링의 핵심인 DI(Dependcy Injection)와 IoC (Inversion of Control) 제공</td></tr><tr><td>spring-aop</td><td>AOP 구현 기능 제공</td></tr><tr><td>spring-jdbc</td><td>DB를 쉽게 다룰 수 있는 기능 제공</td></tr><tr><td>spring-tx</td><td>스프링에서 제공하는 트랜잭션 관련 기능 제공</td></tr><tr><td>spring-webmvc</td><td>스프링에서 제공하는 Controller와 View를 이용한 SpringMVC 구현 기능 제공</td></tr></tbody></table><p>프로젝트에 필요한 모듈들은 원격 어딘가의 라이브러리에 저장돼있다. pom.xml파일에 필요한 모듈을 적으면 저 멀리 원격 repository에 있는 라이브러리가 알아서 프로젝트에 다운된다!</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p><img src="/img/20200319_pom.png" alt="pom.xml"></p><p>pom.xml 파일 작성 후 Maven &gt; Update Project를 실행하면 <del>Maven Dependencies</del> 폴더 안에 관련 모듈들이 알맞은 버전으로 생긴다.<br><br></p><hr><h2 id="Spring-IoC-Container"><a href="#Spring-IoC-Container" class="headerlink" title="Spring IoC Container"></a>Spring IoC Container</h2><p>스프링 프레임워크에는 컨테이너가 하나 있다. 바로 객체를 생성하고 조립하는 컨테이너로 편하게 스프링 컨테이너라고 부르고, 여기서 생성된 객체를 <code>Bean</code>이라고 부른다. </p><blockquote><p>왜 Bean일까?<br>처음 스프링을 공부했을 때부터 항상 궁금했다. 왜 그동안은 object나 instance라고 부르다가 갑자기 bean일까?? 구글링을 백번해도 나오지 않는 Bean이라는 단어의 유래…<br>내 추측은 콩 껍질 안에 콩이 여러개 있는 모양이 스프링 프레임워크의 구조와 비슷해서 그렇게 지었나 싶다. 그럼 Container나 BeanFactory가 아니라 Pod여야하는 것 아닌가? 알 수 없군…</p></blockquote><p>Bean을 만드는 순서는:</p><ol><li>applicationContext.xml에 property등을 적어 bean을 만든다.</li><li>스프링 컨테이너에서 bean을 생성하고 조립한다.</li><li>필요한 bean을 가져다 써서 어플리케이션을 구현한다. </li></ol><h3 id="ApplicationContext-xml"><a href="#ApplicationContext-xml" class="headerlink" title="ApplicationContext.xml"></a>ApplicationContext.xml</h3><p>이 파일이 바로 Bean을 만들어주는 스프링 컨테이너다. 원래 객체를 생성할 때 <code>New</code>를 통해서 객체를 메모리에 로딩시킨다. 하지만 xml 파일로 Bean을 생성하면 메모리 어딘가에 스프링 컨테이너가 있고, 그곳에서 Bean이 생성되는 것이다. </p><p><img src="/img/20200319_applicationcontext.png" alt="applicationcontext.xml"></p><h3 id="Bean을-사용하는-방법"><a href="#Bean을-사용하는-방법" class="headerlink" title="Bean을 사용하는 방법"></a>Bean을 사용하는 방법</h3><p>생성된 Bean을 사용하는 법은 꽤 간단하다. </p><ol><li><code>GenericXmlApplicationContext</code>를 통해 어떤 xml을 사용할지 알려준다.</li><li><code>.getBean()</code>을 통해 컨테이너에서 생성된 Bean 중 어떤 Bean을 가져올지 알려준다.</li><li>Bean을 사용한다.</li><li>xml 파일을 통해 가져온 Bean은 외부 자원이니 반납해준다.<br><img src="/img/20200319_getBean.png" alt=".getBean"></li></ol><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://dzone.com/articles/spring-framework-tutorial-for-beginners-2">Spring Framework for Beginners</a><br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew">[인프런] 자바 스프링 프레임워크 강의</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/19/Spring-Framework/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java의 HashMap</title>
      <link>https://itzjamie96.github.io/2020/03/18/Java-HashMap/</link>
      <guid>https://itzjamie96.github.io/2020/03/18/Java-HashMap/</guid>
      <pubDate>Wed, 18 Mar 2020 13:12:02 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h2 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h2&gt;&lt;p&gt;Arrays store items as an ordered collection and in order to access the items an index number (&lt;code&gt;int&lt;/code&gt; type) is needed. A &lt;code&gt;HashMap&lt;/code&gt; however, stores items in &lt;del&gt;key/value&lt;/del&gt; pairs and you can access the value using the &lt;del&gt;key&lt;/del&gt;. The &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; notation tells the type of object used as keys and values. &lt;/p&gt;
&lt;br&gt;

&lt;h3 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;p&gt;Create a &lt;code&gt;HashMap&lt;/code&gt; object called &lt;em&gt;capitalCities&lt;/em&gt; that will store &lt;code&gt;String&lt;/code&gt; keys and &lt;code&gt;Integer&lt;/code&gt; values: &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap; &lt;span class=&quot;comment&quot;&gt;// import the HashMap class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HashMap&amp;lt;String, String&amp;gt; capitalCities = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; 

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>Arrays store items as an ordered collection and in order to access the items an index number (<code>int</code> type) is needed. A <code>HashMap</code> however, stores items in <del>key/value</del> pairs and you can access the value using the <del>key</del>. The <code>&lt; &gt;</code> notation tells the type of object used as keys and values. </p><br><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Create a <code>HashMap</code> object called <em>capitalCities</em> that will store <code>String</code> keys and <code>Integer</code> values: </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap; <span class="comment">// import the HashMap class</span></span><br><span class="line"></span><br><span class="line">HashMap&lt;String, String&gt; capitalCities = <span class="keyword">new</span> HashMap&lt;String, String&gt;();  </span><br></pre></td></tr></tbody></table></figure> <br><a id="more"></a>### Add ItemsTo add items, use the `put()` method: <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">capitalCities.put(<span class="string">"Korea"</span>, <span class="string">"Seoul"</span>);</span><br><span class="line">capitalCities.put(<span class="string">"Poland"</span>, <span class="string">"Warsaw"</span>);</span><br><span class="line">capitalCities.put(<span class="string">"Germany"</span>, <span class="string">"Berlin"</span>);</span><br><span class="line">System.out.println(capitalCities);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line">{Korea=Seoul, Poland=Warsaw, Germany=Berlin}</span><br></pre></td></tr></tbody></table></figure><br><h3 id="Access-an-Item"><a href="#Access-an-Item" class="headerlink" title="Access an Item"></a>Access an Item</h3><p>To access a value in the <code>HashMap</code>, use the <code>get()</code> method and <del>refer to its key</del>:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String city = capitalCities.get(<span class="string">"Korea"</span>);</span><br><span class="line">System.out.println(city);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line">Seoul</span><br></pre></td></tr></tbody></table></figure><br><h3 id="Remove-an-Item"><a href="#Remove-an-Item" class="headerlink" title="Remove an Item"></a>Remove an Item</h3><p>To remove an item, use the <code>remove()</code> method and <del>refer to its key</del>:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">capitalCities.remove(<span class="string">"Germany"</span>);</span><br><span class="line">System.out.println(capitalCities);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line">{Korea=Seoul, Poland=Warsaw}</span><br></pre></td></tr></tbody></table></figure><p>To remove <del>ALL ITEMS</del>, use the <code>clear()</code> method:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">capitalCities.clear();</span><br><span class="line">System.out.println(capitalCities);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line">{}</span><br></pre></td></tr></tbody></table></figure><br><h3 id="HashMap-Size"><a href="#HashMap-Size" class="headerlink" title="HashMap Size"></a>HashMap Size</h3><p>To find out how many items there are, use the <code>size()</code> method:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> size = capitalCities.size();</span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="Loop-Through-a-HashMap"><a href="#Loop-Through-a-HashMap" class="headerlink" title="Loop Through a HashMap"></a>Loop Through a HashMap</h3><p>Loop through the items with a <del>for-each</del> loop.<br><strong>Note:</strong> use the <code>keySet()</code> method for <del>keys</del>, and use the <code>values()</code> method for <del>values</del>:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : capitalCities.keySet()) {</span><br><span class="line">    <span class="comment">// process each key in turn </span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : capitalCities.values()) {</span><br><span class="line">    <span class="comment">// process each value in turn </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h3 id="Loop-Through-to-FIND-a-key"><a href="#Loop-Through-to-FIND-a-key" class="headerlink" title="Loop Through to FIND a key"></a>Loop Through to FIND a key</h3><p>Check if the HashMap includes a given key with <code>containsKey()</code> method: </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> USA = capitalCities.containsKey(<span class="string">"USA"</span>);</span><br><span class="line">System.out.println(USA);</span><br><span class="line"></span><br><span class="line"><span class="comment">//RESULT</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></tbody></table></figure><br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.dukelearntoprogram.com/course3/doc/#hashmap">Duke Learn to Program: Java Documentation</a><br><a href="https://www.w3schools.com/java/java_hashmap.asp">w3schools.com</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/18/Java-HashMap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo로 블로그를 만들어봤다</title>
      <link>https://itzjamie96.github.io/2020/03/14/I-made-a-blog-with-hexo/</link>
      <guid>https://itzjamie96.github.io/2020/03/14/I-made-a-blog-with-hexo/</guid>
      <pubDate>Sat, 14 Mar 2020 14:37:29 GMT</pubDate>
      <description>
      
        &lt;hr&gt;

&lt;h3 id=&quot;나도-블로그-만들었다&quot;&gt;&lt;a href=&quot;#나도-블로그-만들었다&quot; class=&quot;headerlink&quot; title=&quot;나도 블로그 만들었다!&quot;&gt;&lt;/a&gt;나도 블로그 만들었다!&lt;/h3&gt;&lt;p&gt;개발 공부를 시작한 이후로 수 많은 기술 블로그들을 접했다. &lt;code&gt;완전 멋있어!&lt;/code&gt;라고 생각했고 내가 만들 일은 없을 거라고 믿었다. 그런데 어느 날 나도 멋져보이고 싶었다! 그래서 호다닥 블로그 만드는 법을 검색해봤다.&lt;/p&gt;
&lt;br&gt;   

&lt;h4 id=&quot;플랫폼&quot;&gt;&lt;a href=&quot;#플랫폼&quot; class=&quot;headerlink&quot; title=&quot;플랫폼&quot;&gt;&lt;/a&gt;플랫폼&lt;/h4&gt;&lt;p&gt;보통 ‘블로그’라 하면 네이버와 티스토리가 흔히 떠오르겠지만, 내가 생각한 멋진 블로그는 우선 주소창이 &lt;code&gt;~~.github.io&lt;/code&gt;이어야 했다 (단순히 멋있기 때문). 찾아보니 Static Website Generator로 페이지를 생성하고 GitHub Pages에 배포하면 된다고 한다! 근데 또 여기서 고민: &lt;code&gt;정적 페이지는 뭘로 만들지?&lt;/code&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h3 id="나도-블로그-만들었다"><a href="#나도-블로그-만들었다" class="headerlink" title="나도 블로그 만들었다!"></a>나도 블로그 만들었다!</h3><p>개발 공부를 시작한 이후로 수 많은 기술 블로그들을 접했다. <code>완전 멋있어!</code>라고 생각했고 내가 만들 일은 없을 거라고 믿었다. 그런데 어느 날 나도 멋져보이고 싶었다! 그래서 호다닥 블로그 만드는 법을 검색해봤다.</p><br>   <h4 id="플랫폼"><a href="#플랫폼" class="headerlink" title="플랫폼"></a>플랫폼</h4><p>보통 ‘블로그’라 하면 네이버와 티스토리가 흔히 떠오르겠지만, 내가 생각한 멋진 블로그는 우선 주소창이 <code>~~.github.io</code>이어야 했다 (단순히 멋있기 때문). 찾아보니 Static Website Generator로 페이지를 생성하고 GitHub Pages에 배포하면 된다고 한다! 근데 또 여기서 고민: <code>정적 페이지는 뭘로 만들지?</code></p><a id="more"></a> <br>여러가지 정적 사이트 생성기가 있었다. <table><thead><tr><th align="left">Jekyll</th><th align="center">Hugo</th><th align="center">Hexo</th><th align="center">Gatsby</th></tr></thead><tbody><tr><td align="left">a Ruby generator built by Github for powering their Github pages</td><td align="center">an extremly fast static generator built on top of the Go programming language</td><td align="center">a fast website generator based on Node.js</td><td align="center">a blazing fast static site/PWA generator built around modern web technologies such as React and GraphQL</td></tr></tbody></table><blockquote><p><a href="https://www.techiediaries.com/jekyll-hugo-hexo/">참고: How to Choose the Right Static Generator: Jekyll vs. Hugo vs. Hexo</a></p></blockquote><p>근데 이ㅣ중에서 내가 고를 수 있는 건 <strong>Hexo</strong>밖에 없었다. <code>저기 있는 기술 중 node.js밖에 안써봐서ㅎ</code> 그래도 하나라도 아는 게 어딘가! 그리고 Hexo는 그 중 테마도 예쁜 게 제일 많았다! 나는 예쁜 게 좋은 사람이니 이게 제일 좋았다. </p><br><h4 id="Hexo-처음-써본-간략한-후기"><a href="#Hexo-처음-써본-간략한-후기" class="headerlink" title="Hexo 처음 써본 간략한 후기"></a>Hexo 처음 써본 간략한 후기</h4><p>내 개발실력은 “실력”이라고 할 것도 없고 그냥 이제 막 “개발”에 발가락을 담궈본 수준이다. node.js도 써본 적만 있지 잘 아는 것도 아니었다. 그 상태로 나름 따라해본다고 이것 저것 검색해보고 만든 후, 커스터마이징 하려고 테마 폴더를 열어봤는데 그냥 기절할 뻔했다. <code>하나도 모르겠어!</code> 흑흑 공부할게 아주 한참 남았구나 싶은 순간이었다. CSS도 나름 자신있다고 생각했는 데 절대 아니었다. 어디서 개발한다고 하지 말아야지…개발은 무슨 응애다. 그래도 어찌저찌 커마는 했다…<br><br></p><p><strong>결론: 뭔지 모르고 그냥 만들었다</strong></p><br><h3 id="앞으로의-계획"><a href="#앞으로의-계획" class="headerlink" title="앞으로의 계획"></a>앞으로의 계획</h3><p>사실 이름만 거창하게 기술 블로그지, 아직 남들에게 공유할 만한 기술 스택은 갖춘게 없다. 대신 지금부터라도 꾸준하게 TIL을 기록해보려고 한다. 보여주기 식이라도 꾸준히 쓰면 머릿속에 하나라도 남겠지! 최소한 마크다운은 제대로 알게 되지 않을까?ㅎ 작심삼일이 아니길 기도할 뿐…</p><br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>블로그 만들 때 참고한 자료들:<br><a href="https://www.youtube.com/watch?v=Onglr1_Kgls">YouTube DesignCourse: The Hexo Static Site (Blog) Generator - Beginner’s Crash Course</a></p><p><a href="https://www.youtube.com/watch?v=8uRgIwgumqA">YouTube 카인드패밀리: 오늘 부터 나도 github.io 블로그 운영자다!! | github pages , goormide, hexo</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://itzjamie96.github.io/2020/03/14/I-made-a-blog-with-hexo/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
