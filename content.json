{"pages":[{"title":"About","text":"☕ + 🍰 = 👩💻 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/about/index.html"}],"posts":[{"title":"[GitHub] Repository 합치기 (commit history 포함)","text":"작년부터 자바를 위주로 공부해오다가 최근부터 본격적으로 파이썬을 공부하게 되었다. 파이썬 공부를 위해 GitHub에서 repository를 새로 생성하려다가, 오랜만에 내가 그동안 생성한 repo들을 보게 되었는데 아주 중구난방이었다. 공부를 하다만 기록들이 넘쳐났는데, 이참에 repo들을 정리할 겸 비슷한 내용의 repo들을 합치기로 했다. *repo = repository 합치기 전 확인할 것들 합친 프로젝트들을 보관할 새로운 repo 생성하기 합칠 프로젝트들 사이에 충돌이 일어날 수 있는 요소들 정리하기 (EX: 똑같은 이름의 폴더, readme.md 등) repo 안에 합쳐질 프로젝트 구조에 맞게 폴더 정리해두기. 구조를 미리 생각해놓는 것은 중요하다. 안그러면 한 repo에 뒤죽박죽 합쳐진 것들이 섞일 것이다. 내가 원한 폴더 구조: Repository 합치기(Merge) 신규 repository 생성먼저 합칠 새로운 repo를 생성한다 (git init도 해준다). 편의상 NEW repo라고 하겠다. 나는 Java로 자료구조와 알고리즘 연습하던 각각의 두 repo를 합치기로 결정했기 때문에, 누가봐도 Java의 자료구조와 알고리즘을 위한 repo라는 것을 나타낼 수 있는 이름의 repo를 새로 만들었다. 합칠 repository 정리합치기 전 확인할 부분에서 언급했듯이, merge하고자 하는 repo들을 좀 정리할 필요가 있다. 왜 그런지는 뒤에 나온다. 우선 편의상 내가 합치고자 하는 repo들을 OLD 1, OLD 2 repo라고 하겠다. repository 연결NEW repo의 위치 (C:\\Git\\Java-DataStructure-and-Algorithms&gt;에서 OLD repo들을 remote로 추가해준다. 12git remote add DataStructure-and-Algorithms-in-Java https://github.com/itzjamie96/DataStructure-and-Algorithms-in-Java.gitgit remote add Problem-Solving https://github.com/itzjamie96/Problem-Solving.git 기존 repository에서 데이터 가져오기각 OLD repo에서 fetch를 통해 원격 저장소의 데이터를 가져온다. 12git fetch DataStructure-and-Algorithms-in-Java mastergit fetch Problem-Solving master 합치기 (Merge)NEW와 OLD repo 들을 merge한다. 이 때 모든 commit history도 가져오기 위해 --allow-unrelated-histories를 해준다. 123456git merge --allow-unrelated-histories DataStructure-and-Algorithms-in-Java/master↓ 결과 ↓CONFLICT (add/add): Merge conflict in README.mdAuto-merging README.mdAutomatic merge failed; fix conflicts and then commit the result. 먼저 OLD 1을 합쳤더니 readme에서 conflict가 떴다 (이래서 합치기 전에 리드미를 없애던가 수정하던가 해야하는 것…) 우선 나는 리드미에 별 내용이 없었기 때문에 add 후 commit을 강행했다 (근자감). push까지 완료한 후 GitHub를 가보니… 생각보다 끔찍한 모양새는 아니었다. OLD 2를 합치기 전에 리드미를 지운 후 합쳐보기로 했다. 그 후 다시 합치기 시작! 1234567git merge --allow-unrelated-histories Problem-Solving/master↓ 결과 ↓CONFLICT (add/add): Merge conflict in .gitignoreAuto-merging .gitignoreAutomatic merge failed; fix conflicts and then commit the result. ^^…이번엔 .gitignore에서 문제가 생겼다…왜 자동으로 merge를 해주지 않는거야 git? 한 줄이던데… 간단한 수정 후 합치기 진행! 123git add .git commit -m \"MERGED REPOSITORIES\"git push origin master 완료!! repository 연결 해제마지막으로 혹시라도 기존의 repo들을 건들지 않도록 remote를 끊어준다. 12git remote remove DataStructure-and-Algorithms-in-Javagit remote remove Problem-Solving 다 끝난 후 GitHub에서 확인을 해봤다. 음 아주 잘됐군! 그저 파일만 합쳐진 것이 아니라 기존의 repo들에서 commit 기록까지 모두 잘 따라왔다. 끝! ReferenceCombining Repositories document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/07/20/github-merge-repositories/"},{"title":"Hexo로 블로그를 만들어봤다","text":"나도 블로그 만들었다!개발 공부를 시작한 이후로 수 많은 기술 블로그들을 접했다. 완전 멋있어!라고 생각했고 내가 만들 일은 없을 거라고 믿었다. 그런데 어느 날 나도 멋져보이고 싶었다! 그래서 호다닥 블로그 만드는 법을 검색해봤다. 플랫폼보통 ‘블로그’라 하면 네이버와 티스토리가 흔히 떠오르겠지만, 내가 생각한 멋진 블로그는 우선 주소창이 ~~.github.io이어야 했다 (단순히 멋있기 때문). 찾아보니 Static Website Generator로 페이지를 생성하고 GitHub Pages에 배포하면 된다고 한다! 근데 또 여기서 고민: 정적 페이지는 뭘로 만들지? 여러가지 정적 사이트 생성기가 있었다. Jekyll Hugo Hexo Gatsby a Ruby generator built by Github for powering their Github pages an extremly fast static generator built on top of the Go programming language a fast website generator based on Node.js a blazing fast static site/PWA generator built around modern web technologies such as React and GraphQL 참고: How to Choose the Right Static Generator: Jekyll vs. Hugo vs. Hexo 근데 이 중에서 내가 고를 수 있는 건 Hexo밖에 없었다. 저기 있는 기술 중 node.js밖에 안써봐서ㅎ 그래도 하나라도 아는 게 어딘가! 그리고 Hexo는 그 중 테마도 예쁜 게 제일 많았다! 나는 예쁜 게 좋은 사람이니 이게 제일 좋았다. Hexo 처음 써본 간략한 후기내 개발실력은 “실력”이라고 할 것도 없고 그냥 이제 막 “개발”에 발가락을 담궈본 수준이다. node.js도 써본 적만 있지 잘 아는 것도 아니었다. 그 상태로 나름 따라해본다고 이것 저것 검색해보고 만든 후, 커스터마이징 하려고 테마 폴더를 열어봤는데 그냥 기절할 뻔했다. 하나도 모르겠어! 흑흑 공부할게 아주 한참 남았구나 싶은 순간이었다. CSS도 나름 자신있다고 생각했는 데 절대 아니었다. 어디서 개발한다고 하지 말아야지…개발은 무슨 응애다. 그래도 어찌저찌 커마는 했다… 결론: 뭔지 모르고 그냥 만들었다 앞으로의 계획사실 이름만 거창하게 기술 블로그지, 아직 남들에게 공유할 만한 기술 스택은 갖춘게 없다. 대신 지금부터라도 꾸준하게 TIL을 기록해보려고 한다. 보여주기 식이라도 꾸준히 쓰면 머릿속에 하나라도 남겠지! 최소한 마크다운은 제대로 알게 되지 않을까?ㅎ 작심삼일이 아니길 기도할 뿐… Reference블로그 만들 때 참고한 자료들:YouTube DesignCourse: The Hexo Static Site (Blog) Generator - Beginner’s Crash Course YouTube 카인드패밀리: 오늘 부터 나도 github.io 블로그 운영자다!! | github pages , goormide, hexo document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/03/14/i-made-a-blog-with-hexo/"},{"title":"[Java] String 비교하기","text":"Java에서 String끼리 비교할 때 ==는 쓰면 안된다고 한다. 의미상으로는 둘 다 “같다”는 뜻인 데, 왜 .equals()는 되고 ==는 안되는 걸까? 그래서 알아보자! String에서 .equals() 와 ==의 차이! Java의 데이터 타입Java에서 Data Type이란 해당 데이터가 메모리에 어떻게 저장되고, 프로그램에서 어떻게 처리되어야 하는지를 알려주는 것이다. 자바에서 타입은 크게 기본형(Primitive) 타입과 참조형(Reference) 타입이 있다. String 생성하기Java에서 가장 흔히 + 많이 쓰이는 참조형 타입은 바로 String(문자열)이다. String을 생성하는 방법은 2가지가 있다. new 연산자로 생성하는 방법 literal로 생성하는 방법 String 생성하기12345//new로 생성String a = new String(\"Hello World!\"); //literal로 생성String b = \"Hello World!\"; 여기서 차이점이 뭘까? 바로 String이 생성되는 메모리의 영역이다. new로 생성하는 Stringnew를 통해 String을 생성하면 Heap영역에 존재하게 된다. 이 경우 내용물은 같아보여도 Heap에 각자 한 부분씩 자리를 잡게 된다. literal로 생성하는 String반대로 literal로 생성할 경우 String Constant Pool이라는 영역에 존재하게 된다 (이 영역도 Heap의 한 부분이긴 하다). “constant = 계속되는”에서 추측할 수 있듯이 이 영역에 있는 String은 계속해서 쓸 수 있다. 쉽게 말해서 재활용할 수 있는 것이다. 예시에서 보면 알 수 있듯이 String c와 String d는 같은 “Hello World!”를 참조한다. .equals() VS ==그렇다면 .equals() 와 ==로 돌아와보자. 이 두 기능의 차이는 뭘까? .equals() : 문자(character)를 비교 == : 변수의 값(=reference)를 비교 결론==의 경우 변수의 값을 비교하는 데, 참조형 타입인 String의 경우 참조하는 주소가 다를 수 있기 때문에 String 끼리 비교했을 때 당연히 값이 다르다고 나올 수 있다. 따라서 String을 비교할 때는 .equals()를 쓰는 게 좋은 것이었다. Reference[Coursera] Data Structures and Performance[Medium Leopold Baik(백중원)] Java String의 메모리에 대한 고찰 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/05/14/java-comparing-strings/"},{"title":"[Spring] 의존객체 자동주입","text":"의존객체 자동 주입의존객체 자동 주입이란, Spring 2.5부터 생긴 기능으로 &lt;constructor-arg&gt; 또는 &lt;property&gt; 등의 태그로 의존 대상 객체를 명시하지 않아도 스프링 컨테이너가 자동으로 필요한 의존 대상 객체를 찾아서 객체가 필요한 객체에 주입해주는 기능이다. 구현할 때는 @Autowired 와 @Resource 어노테이션을 이용한다. @Autowired@Autowired는 스프링 컨테이너에 있는 Bean 중 타입이 일치하는 Bean을 자동으로 주입해준다. 사용하기 위해서는 다음의 두 가지만 적어주면 된다. 자동 주입 대상에 @Autowired 어노테이션 사용 XML 파일에 &lt;context:annotation-config/&gt; 추가 예시를 살펴보면 다음과 같다. 12345678910public class WordRegisterService { private WordDao wordDao; @Autowired public wordRegisterService(WordDao wordDao) { this.wordDao = wordDao; } ...} 이렇게 Service 클래스의 생성자에 @Autowired를 달아주면, xml 파일에서 타입이 WordDao인 Bean을 찾아서 생성자에 자동으로 주입해준다. 123456...&lt;context:annotaion-config /&gt;&lt;bean id=\"wordDao\" class=\"com.word.dao.WordDao\"/&gt; //이걸 주입한다!&lt;bean id=\"registerService\" class=\"com.word.service.WordRegisterService\"/&gt;&lt;bean id=\"searchService\" class=\"com.word.service.WordSearchService\"/&gt; 참고로 이렇게 생성자에 @Autowired 어노테이션을 쓰는 것은 상관이 없지만, 다른 메소드에 쓰기 위해서는 기본 생성자가 필수다. @Resource@Resource 어노테이션은 스프링 컨테이너에 있는 Bean 중에서 이름이 일치하는 Bean을 찾아서 주입해준다. 다만 @Autowired와는 달리 property나 메소드에만 사용이 가능하다. 그렇기 때문에 기본 생성자가 필수다 (객체가 일단 생성이 돼야 주입이든 뭐든 할 수 있다). 12345678910111213public class WordRegisterService { @Resource private WordDao wordDao; //기본 생성자 public wordRegisterService() { } public wordRegisterService(WordDao wordDao) { this.wordDao = wordDao; } ...} 위와 같이 @Resource를 달아주면 xml 파일에서 이름이 wordDao인 Bean을 찾게 된다. 123456...&lt;context:annotaion-config /&gt;&lt;bean id=\"wordDao\" class=\"com.word.dao.WordDao\"/&gt; //id가 wordDao = 이름 일치!... 의존 객체 선택@Autowired 어노테이션은 타입이 일치하는 Bean을 자동 주입한다고 배웠다. 근데 만약 동일한 타입을 가진 Bean이 두 개 이상이라면 @Autowired 어노테이션은 어떻게 작동할까? 당연히 어떤 Bean을 주입해야하는 지 알 수 없어서 Exception이 발생한다. 이럴 때는 @Qualifier 어노테이션을 이용해 특정 Bean을 지정해줄 수 있다. @Qualifier@Qualifier 어노테이션을 사용하기 위해서는 두 가지를 해주면 된다. XMl 파일에 &lt;qualifier value=\"valueName\"&gt;를 통해 특정 이름 정해주기 @Autowired 밑에 @Qualifier(\"valueName\") 적어주기 XML파일12345&lt;bean id=\"wordDao1\" class=\"com.word.dao.WordDao\"&gt; &lt;qualifier value=\"usedDao\"/&gt;&lt;/bean&gt;&lt;bean id=\"wordDao2\" class=\"com.word.dao.WordDao\"/&gt; &lt;bean id=\"wordDao3\" class=\"com.word.dao.WordDao\"/&gt; XML 파일에 wordDao타입이 3개 정도 있다. 여기서 특정 Bean에 &lt;qualifier&gt; 태그를 통해 \"usedDao\"라는 이름을 정해주면 이 이름을 가진 bean을 자동 주입하게 된다. Service 클래스1234567891011public class WordRegisterService { private WordDao wordDao; @Autowired @Qualifier(\"usedDao\") public wordRegisterService(WordDao wordDao) { this.wordDao = wordDao; } ...} Reference[Baeldung] Guide to Spring @Autowired[인프런] 자바 스프링 프레임워크 강의 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/03/23/spring-auto-di/"},{"title":"[Java] 스택(Stack)","text":"스택 (Stack)Stack은 제한적으로 접근할 수 있는 구조다. 한 쪽 끝에서만 데이터를 넣거나 뺄 수 있는 구조로, 가장 나중에 넣은 데이터를 가장 먼저 빼낼 수 있다. 이게 바로 LIFO: Last In First Out 자료구조다. 가장 대표적인 예시는 프링글스인 것 같다. 윈기둥 형태의 프링글스 통에는 과자가 빽빽히 들어있다. 과자를 한 조각 꺼내 먹으려면 맨 위에 있는 조각부터 꺼내게 된다. 통에 가장 처음 넣어진 과자는 바닥 쪽에 있고, 맨 마지막으로 통에 넣어진 조각이 가장 처음 꺼내지게 된다. 이것은 FILO:First In Last Out이기도 한, 결국 완벽한 스택이다. 스택 생성스택을 생성하기 위해서 먼저 java.util.Stack 패키지가 import되야 한다. Import한 후 스택을 생성해보자. 스택 생성1Stack&lt;Type&gt; stacks = new Stack&lt;&gt;(); &lt;Type&gt;에는 해당 스택이 어떤 타입의 데이터를 담을 것인지 지정해주면 된다. 스택 타입12345// 정수 스택!Stack&lt;Integer&gt; stacks = new Stack&lt;&gt;();// 문자열 스택!Stack&lt;String&gt; stacks = new Stack&lt;&gt;(); 스택의 메서드스택에는 총 5가지의 메서드가 있다. push()스택에 데이터를 추가하기 위해서는 push() 메서드를 쓴다. push()1234567891011121314import java.util.Stack;class Main { public static void main(String[] args) { Stack&lt;String&gt; animals= new Stack&lt;&gt;(); // Add elements to Stack animals.push(\"Dog\"); animals.push(\"Horse\"); animals.push(\"Cat\"); System.out.println(\"Stack: \" + animals); }} Console1Stack: [Dog, Horse, Cat] 결과창에서 볼 수 있듯이 가장 먼저 push한 “Dog”가 스택의 맨 처음에 있다. pop()스택의 맨 마지막 요소를 없애기 위해서는 pop() 메서드를 쓴다. 참고로 맨 마지막 요소는 사실 상 스택의 맨 꼭대기에 있는 요소이기 때문에 top이라고 부른다. pop()1234567891011121314151617import java.util.Stack;class Main { public static void main(String[] args) { Stack&lt;String&gt; animals= new Stack&lt;&gt;(); // Add elements to Stack animals.push(\"Dog\"); animals.push(\"Horse\"); animals.push(\"Cat\"); System.out.println(\"Initial Stack: \" + animals); // Remove element stacks String element = animals.pop(); System.out.println(\"Removed Element: \" + element); }} Console12Initial Stack: [Dog, Horse, Cat]Removed Element: Cat peek()스택의 맨 마지막 요소를 보고싶을 땐 peek() 메서드를 쓴다. peek()123456789101112131415161718import java.util.Stack;class Main { public static void main(String[] args) { Stack&lt;String&gt; animals= new Stack&lt;&gt;(); // Add elements to Stack animals.push(\"Dog\"); animals.push(\"Horse\"); animals.push(\"Cat\"); System.out.println(\"Stack: \" + animals); // Access element from the top String element = animals.peek(); System.out.println(\"Element at top: \" + element); }} Console12Stack: [Dog, Horse, Cat]Element at top: Cat search()스택의 내용물은 아는 데, 위치를 알고 싶다면? 그럴 때는 search() 메서드를 쓰자. Search()1234567891011121314151617import java.util.Stack;class Main { public static void main(String[] args) { Stack&lt;String&gt; animals= new Stack&lt;&gt;(); // Add elements to Stack animals.push(\"Dog\"); animals.push(\"Horse\"); animals.push(\"Cat\"); System.out.println(\"Stack: \" + animals); // Search an element int position = animals.search(\"Horse\"); System.out.println(\"Position of Horse: \" + position); }} Console12Stack: [Dog, Horse, Cat]Position of Horse: 2 empty()스택이 비었을까 안비었을까? 확인하려면 empty()를 통해 알아보자. 스택이 비었다면 True, 내용물이 하나라도 있다면 False를 리턴해준다. empty()1234567891011121314151617import java.util.Stack;class Main { public static void main(String[] args) { Stack&lt;String&gt; animals= new Stack&lt;&gt;(); // Add elements to Stack animals.push(\"Dog\"); animals.push(\"Horse\"); animals.push(\"Cat\"); System.out.println(\"Stack: \" + animals); // Check if stack is empty boolean result = animals.empty(); System.out.println(\"Is the stack empty? \" + result); }} Console12Stack: [Dog, Horse, Cat]Is the stack empty? false 다음엔 스택을 이용해서 알고리즘을 풀어볼 예정이다. 기억하자 프링글스! 2020-07-16: 언제 풀어???????ㅠ 작심삼일 반성하자 Reference[Programiz] Java Stack Class[Jenkov Tutorials] Java Stack document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/04/23/java-stack/"},{"title":"[Python] 비트연산자로 부분집합 구하기","text":"비트연산자 &amp;와 &lt;&lt;를 이용해 이중 for문이라도 빠르게 부분집합을 구해보자! 파이썬으로 부분집합을 구할때 보통 itertools를 사용한다. 하지만 itertools 라이브러리 사용이 불가능한 코테도 있으니(ex. 쌤썽ㅠ)… for 문을 이용해 부분집합을 빠르게 구하는 방법도 알아야한다. 이것은 바로 비트연산자로 계산해서 부분집합을 구하는 방법이다. 먼저 코드부터 보자. Finding out powersets12345678arr = [1,2,3]n = len(arr)for i in range(1 &lt;&lt; n): for j in range(n): if i &amp; (1 &lt;&lt; j): print(arr[j], end=' ') print() 결과1234567891 2 1 2 3 1 3 2 3 1 2 3 Process finished with exit code 0 위의 코드는 주어진 arr 리스트의 부분집합을 모두 출력한다. n은 arr의 길이인 3이다. 이렇게 원소가 3개인 집합의 부분집합들을 구하는 코드를 분석해보자. 이 코드를 이해하기까지 정!말! 오래 걸렸다 😭😭😭 . 다시 봐도 이해할 수 있도록 코드를 한 줄씩 쪼개서 이해한 과정을 남겨본다. 원리이 방식은 2진법을 이용해 부분집합을 알아낸다. 2진법은 두 개의 숫자 0과 1만을 이용해 숫자를 나타내는 방식이다. 이걸 가지고 1은 원소가 포함 된 경우, 0은 원소가 포함되지 않은 경우로 생각한다. 그림과 같이 [1, 2, 3]이라는 숫자 리스트가 있으면 가장 긴 부분집합은 [1, 2, 3]으로, 부분집합의 최대 길이는 주어진 리스트의 길이와 같다. 따라서 각 부분집합을 리스트처럼 생각해서 특정 원소가 있으면 1, 없으면 0으로 표기한다. 이렇게 공집합을 제외한 모든 부분집합들을 2진법으로 나타낸 후, 각 원소의 값을 알아내기 위해서는 기존에 주어진 숫자 리스트의 인덱스를 알아야 한다. 이를 위해서 각 2진법으로 나타낸 각 부분집합의 요소들과 AND(교집합)가 성립하는 인덱스 번호를 알아낸다. 말로 표현하면 어려우니 그림으로 확인하자. 이렇게 교집합이 있는 인덱스 번호들을 알아낸 후, 그 인덱스의 요소를 출력하면 부분집합이 구해지는 것이다. 코드 쪼개기위의 원리를 기반으로 코드를 한 줄씩 살펴보자. for i in range(1 &lt;&lt; n) 먼저 &lt;&lt; 비트 연산자에 대해 알아보자 1 &lt;&lt; n왼쪽의 1을 2진수로 보고, n번 왼쪽으로 shift하라는 뜻이다. 예를 들어 1 &lt;&lt; 3은 2진수 100이 된다. 근데 이렇게 1을 왼쪽으로 shift하고 난 결과는 2^n과 결과가 같다! 원래 부분집합의 총 갯수를 구하는 공식은 2^원소의 갯수다. 여기서 n은 주어진 숫자 리스트의 길이다. 정리하자면 1&lt;&lt;n은 2^n과 같고, 이것은 부분집합의 총 갯수를 구하는 것이다. 부분집합의 총 갯수만큼 for문 돌리기1for i in range(1&lt;&lt;n): 따라서 위의 for문은 부분집합의 모든 case를 확인하겠다는 것이다. for j in range(n)n은 주어진 원소들의 갯수이다. 따라서 0 ~ n-1까지의 숫자들은 길이가 n인 리스트의 인덱스가 된다. n이 3인 예시의 경우, 0, 1, 2를 하나씩 확인하는 for문이 된다. if i &amp; (1 &lt;&lt; j)여기에 나오는 &amp;는 AND를 찾는 비트연산자로, A &amp; B에서 A와 B의 2진수 형태에서 공통된 값을 10진수로 변환해 리턴해준다. &amp;예시12# ex) print(5 &amp; 4) 위의 예시는 4를 리턴해준다. 5의 2진수 형태는 101이고, 4의 2진수 형태는 100이다. 이 두 숫자 사이의 교집합은 100이기 때문에 이것을 10진수로 변환해 4를 리턴해주는 것이다. 핵심코드12if i &amp; (1&lt;&lt;j): print(arr[j], end=' ') 이제 핵심인 코드를 살펴보자. i는 찾으려는 부분집합이고 (이걸 2진수로 변환해서 1,0으로 이뤄진 리스트처럼 생각) j는 리스트의 인덱스 번호다. 찾으려는 부분집합과 현재 인덱스 번호 사이의 교집합이 있다면, 원본 리스트에서 그 인덱스의 요소를 출력하라는 뜻이다. 예를 들어 i=3일 때를 보자. j는 0 ~ 2까지의 숫자다. 핵심코드 풀이1233 &amp; (1&lt;&lt;0) # 011 &amp; 001 = 1 3 &amp; (1&lt;&lt;1) # 011 &amp; 010 = 103 &amp; (1&lt;&lt;2) # 011 &amp; 100 = 0 j가 0, 1인 경우 2진수 1과 10이라는 결과가 나오지만 j가 2인 경우는 교집합이 없기 때문에 0이 나온다. 따라서 j=2인 경우 이외에는 if 조건을 충족하기 때문에 해당 j를 인덱스로 삼아 숫자 리스트에서 값을 꺼내면 찾고자 하는 부분집합의 원소가 나오게 된다! Conclusion이해하는 과정이 너무 힘들었다. 하지만 [1, 2, 3]의 예시에 대해 직접 위의 과정을 손으로 적어본 것을 통해 약간(?) 이해하게 되었다. 이 방법을 깨달은 사람은 누군지 모르겠지만 진짜 천재같다. 비트연산자로 부분집합 구하기12345678arr = [1,2,3]n = len(arr)for i in range(1&lt;&lt;n): for j in range(n): if i &amp; (1&lt;&lt;j): print(arr[j], end=' ') print() document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/10/15/python-powersets-with-bitwise-operators/"},{"title":"[Python] Memoization(메모이제이션)","text":"재귀함수로 문제를 풀다 보면 재귀를 썼음에도 불가하고 시간초과(!)가 나는 경우들이 있다. 이럴 때 시간을 단축시킬 수 있는 Memoization(메모이제이션)에 대해서 알아보자 Memoization이란?Memoization은 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다. 동적 계획법의 핵심이 되는 기술이다. (출처: 위키백과 메모이제이션) 단어 Memoization만 봐도 Memo화하는 것이라는 걸 알 수 있다. 쉽게 말해 어떤 파라미터 A를 이용한 함수가 호출됐을 때의 output을 메모해뒀다가 나중에 또 A를 이용한 함수의 호출이 있을 때 메모해둔 값을 그대로 불러오는 것이다. 이렇게 되면 A에 대한 연산을 두 번 이상 할 필요가 없어져서 시간이 훅! 줄어들게 된다. Memoization in Python파이썬에서는 이 메모를 하기 위해 딕셔너리를 활용한다. 딕셔너리 데이터 타입을 보면 { key : value }꼴로 저장이 되는 데, key에 함수(파라미터)를 넣고 value에 해당 함수의 output을 넣어주면 된다. 간단하게 memoization을 활용해 팩토리얼을 구하는 법을 알아보자. Factorial Example1234567891011factorial_memo = {}def factorial(n): if n&lt;2: return 1 if n not in factorial_memo: factorial_memo[n] = n * factorial(n-1) return factorial_memo[n]n = 5print(factorial(n)) 위 함수가 동작하는 방법은 아래와 같다. 왼쪽은 시스템 스택, 오른쪽은 메모이제이션을 위해 만들어둔 메모장 딕셔너리다. factorial 메소드에 파라미터 n이 들어오면, 먼저 시스템 스택에 쌓인다.factorial(n)은 memo라는 딕셔너리에 key가 n일 때 value를 n*factorial(n-1)로 저장한다. 이렇게 되면 memo에 있는 n에 대해서는 factorial(n)을 또다시 연산할 필요 없이 그냥 memo에서 해당 key에 대한 value 값만 찾으면 된다. 이미 저장해둔 값만 찾아내면 되니 시간이 얼마나 줄어들겠는가! ⭐시간 줄이기 성공⭐ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/11/15/python-memoization/"},{"title":"[Java] Interface(인터페이스)를 Implement한다는 건","text":"개발을 공부하다 보면 영어 단어를 들리는 그대로 우리말로 옮겨서 사용하는 경우가 많다. 보통 그 단어를 알면 개념을 이해하기 수월한데, (ex. map) 가끔 영어로도 모르는 단어가 있으면 공부하다 너무 헷갈린다. 대표적인 예가 Interface다. 특히 어떤 클래스가 인터페이스를 implement 한다는 게 너무 헷갈려서 정리해본다. Interface란?Interface의 사전적 의미를 살펴보자. 서로 다른 두 개의 시스템, 장치 사이에서 정보나 신호를 주고받는 경우의 접점이나 경계면이다. 즉, 사용자가 기기를 쉽게 동작시키는데 도움을 주는 시스템을 의미한다.출처: 위키백과 이 의미를 Java의 Interface에 대입하면 “어떤 객체를 쉽게 구현하기 위해 도와주는 클래스”라고 생각하면 될 것 같다. 흔히 보이는 인터페이스는 어떤 객체와 연관된 메소드들이 모여있는 구조다. 다만, 메소드에 구현부가 없다. Interface Example12345678public interface Bicycle { //method signatures void changeGear(int newValue); void speedUp(int increment); void applyBrakes(int decrement);} 실제로 인터페이스는 상수, method signiture, default method, static method, 중첩 클래스만 가질 수 있다. 앞서 말한 흔한 인터페이스의 구조는 method signature (메소드 이름 + 파라미터)만 가지고 있는 형태다. Java 8부터 default와 static 키워드가 추가되었다. 기존에는 인터페이스에서 메소드가 어떤 기능을 하는지 구구절절 알려주는 구현부를 쓸 수 없었는데 이제부터는 default나 static 키워드로 선언하면 구현부를 써도 된다. Default나 static 메소드는 따로 오버라이딩하지 않아도 사용할 수 있다고 한다! 더 자세한 건 프로그래머스의 설명을 보는 게 좋을 것 같다. 구현부가 없다 보니 인터페이스는 객체화(instantiate) 할 수 없다 (무슨 기능을 해야하는지 안적혀 있으니 당연한 것 같다). 따라서 인터페이스를 사용하려면 다른 클래스가 implement 하거나 extend 해줘야 한다. Implement하다?나는 인터페이스를 implement 한다는 게 제일 헷갈렸다. 내가 아는 implement의 정의는 “실행하다” 밖에 없었기 때문이다. 그러다 찾은 implement의 IT적 의미: To begin to use a new system출처: Cambridge Dictionary 결국 “사용한다”라는 뜻이었다! Implement an Interface어떤 클래스가 인터페이스를 implement하게 되면 그제서야 오버라이딩을 통해 인터페이스에 있는 메소드들을의 구현부를 쓸 수 있게 된다. Implement Interface Example123456789101112131415161718192021class SamChunRiBicycle implements Bicycle { int gear = 1; void changeGear(int newValue) { gear = newValue; } void speedUp(int increment) { speed = speed + increment; } void applyBrakes(int decrement) { speed = speed - decrement; } void printStates() { System.out.println(\"cadence:\" +cadence + \" speed:\" + speed + \" gear:\" + gear); }} 자료형으로써의 인터페이스인터페이스의 가장 큰 목적은 여러 클래스들이 공통 속성을 가질 때 그 속성을 하나의 그룹으로 압축(?)하기 위해서인 것 같다. 이건 List 인터페이스를 보면 이해가 딱 된다. ArrayList, LinkedList, Stack, Vector 모두 클래스인데, List를 implement하고 오버라이딩 해서 공통된 리스트 속성을 가지지만 각자 다른 클래스들이 나오는 것이다!🙌 이래서 인터페이스를 정의한다는 것은 새로운 참조형 (reference data type)을 만드는 것과 같다고 하나보다. ReferenceOracle Java Documentation: What Is an Interface?Oracle Java Documentation: Using an Interface as a TypeJava Api: Interface List document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/04/01/java-implement-an-interface/"},{"title":"[Spring] Bean의 범위 - Singleton과 Prototype","text":"Bean의 범위(scope)스프링에서 생성되는 bean의 범위(scope)란, 사실상 bean의 생명주기와 같다. 말 그대로 bean이 생성될 때부터 소멸할 때까지의 범위를 의미한다. 스프링은 기본적으로 모든 bean을 Singleton으로 생성해서 관리한다. 그렇다면 singleton이 대체 무엇인가? Singleton우선 단어에서 대충 감이 잡힌다. Singleton. SINGLE! 단어 자체에서 유추할 수 있다시피 singleton은 스프링 컨테이너에서 bean이 생성될 때 그 bean을 딱! 한 개만 생성한다. 따라서 그 bean을 사용하는 모든 request는 해당 bean만 참조하게 된다. Singleton의 사전적 정의를 보면 내가 생각했던 싱글이 맞는 것 같다! 1. (단독) 개체 2. 독신자 (결혼을 안 했거나 애인이 없는 사람) 3. (쌍둥이가 아닌) 외둥이출처: 네이버 영어사전 기존의 Java 프로젝트에서는 new를 통해 새로운 객체를 생성했는데, 같은 이름을 가진 새로운 객체들을 여러 개 생성할 수 있었다. new를 통한 객체 생성 예시1234567Shape s1 = new Shape();Shape s2 = new Shape();Shape s3 = new Shape();System.out.println(s1); System.out.println(s2); System.out.println(s3); 결과:test01.Shape@573f2bb1test01.Shape@5ae9a829test01.Shape@6d8a00e3 볼 수 있다시피 3개의 각기 다른 객체가 생성됐기 때문에 주소가 모두 다른 것을 알 수 있다. 이와 반대로 singleton은 스프링 컨테이너에서 bean을 딱 한 개!만 생성하기 때문에 .getBean()을 딱 하나의 bean만 참조하게 된다. Singleton Bean1234567Shape sq1 = ctx.getBean(\"square\", Shape.class);Shape sq2 = ctx.getBean(\"square\", Shape.class);Shape sq3 = ctx.getBean(\"square\", Shape.class);System.out.println(sq1);System.out.println(sq2);System.out.println(sq3); 결과:test01.Shape@573f2bb1test01.Shape@573f2bb1test01.Shape@573f2bb1 결과에서 알 수 있다시피 각 객체마다 하나의 bean을 참조하고 있다. Prototype기본적으로 스프링에서 bean을 불러오면 매번 같은 객체를 반환한다. 하지만 가끔 하나의 bean으로 여러 객체를 만들어 사용해야할 때가 있다 (마치 new를 쓰는 것 처럼). 이럴 땐 Prototype으로 설정해주면 된다. Prototype으로 bean을 설정하는 방법은 다음과 같다. ApplicationContext.xml1&lt;bean class=\"com.shape.sqaure\" scope=\"prototype\"&gt;&lt;/bean&gt; 위와 같이 XML 파일에서 scope=prototype을 설정해 주면 된다. 혹은 어노테이션을 통해 bean의 범위를 설정해줄 수도 있다. Square.class12345@Component@Scope(\"prototype\")public class Square { } 대부분의 경우 new로 객체를 생성하면 되지만, 스프링 컨테이너의 DI 기능을 사용하고 싶은 경우에 Prototype scope bean을 설정한다고 한다. Reference[인프런] 자바 스프링 프레임워크 강의 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/03/25/spring-bean-scope/"},{"title":"[Spring] 스프링 프레임워크 입문","text":"Spring FrameworkSpring Framework는 Java 어플리케이션을 쉽고 빠르게 개발할 수 있도록 도와주는 오픈 소스 프레임워크다. 스프링은 lightweight = 경량 프레임워크로, Java 어플리케이션을 개발할 때 필요한 다양한 모듈을 제공한다. 여기서 모듈이란 프로그램을 구성하는 구성 요소다. 기계에서 부품이라고 생각하면 될 것 같다.어떤 프로그램을 기능별로 나눈 후, 그 기능들을 다른 프로그램에 쓸 수 있다 = 모듈! 스프링에서 제공하는 모듈: Modules Features spring-core 스프링의 핵심인 DI(Dependcy Injection)와 IoC (Inversion of Control) 제공 spring-aop AOP 구현 기능 제공 spring-jdbc DB를 쉽게 다룰 수 있는 기능 제공 spring-tx 스프링에서 제공하는 트랜잭션 관련 기능 제공 spring-webmvc 스프링에서 제공하는 Controller와 View를 이용한 SpringMVC 구현 기능 제공 프로젝트에 필요한 모듈들은 원격 어딘가의 라이브러리에 저장돼있다. pom.xml파일에 필요한 모듈을 적으면 저 멀리 원격 repository에 있는 라이브러리가 알아서 프로젝트에 다운된다! pom.xml pom.xml 파일 작성 후 Maven &gt; Update Project를 실행하면 Maven Dependencies 폴더 안에 관련 모듈들이 알맞은 버전으로 생긴다. Spring IoC Container스프링 프레임워크에는 컨테이너가 하나 있다. 바로 객체를 생성하고 조립하는 컨테이너로 편하게 스프링 컨테이너라고 부르고, 여기서 생성된 객체를 Bean이라고 부른다. 왜 Bean일까?처음 스프링을 공부했을 때부터 항상 궁금했다. 왜 그동안은 object나 instance라고 부르다가 갑자기 bean일까?? 구글링을 백번해도 나오지 않는 Bean이라는 단어의 유래…내 추측은 콩 껍질 안에 콩이 여러개 있는 모양이 스프링 프레임워크의 구조와 비슷해서 그렇게 지었나 싶다. 그럼 Container나 BeanFactory가 아니라 Pod여야하는 것 아닌가? 알 수 없군… Bean을 만드는 순서는: applicationContext.xml에 property등을 적어 bean을 만든다. 스프링 컨테이너에서 bean을 생성하고 조립한다. 필요한 bean을 가져다 써서 어플리케이션을 구현한다. ApplicationContext.xml이 파일이 바로 Bean을 만들어주는 스프링 컨테이너다. 원래 객체를 생성할 때 New를 통해서 객체를 메모리에 로딩시킨다. 하지만 xml 파일로 Bean을 생성하면 메모리 어딘가에 스프링 컨테이너가 있고, 그곳에서 Bean이 생성되는 것이다. Bean을 사용하는 방법생성된 Bean을 사용하는 법은 꽤 간단하다. GenericXmlApplicationContext를 통해 어떤 xml을 사용할지 알려준다. .getBean()을 통해 컨테이너에서 생성된 Bean 중 어떤 Bean을 가져올지 알려준다. Bean을 사용한다. xml 파일을 통해 가져온 Bean은 외부 자원이니 반납해준다. ReferenceSpring Framework for Beginners[인프런] 자바 스프링 프레임워크 강의 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/03/19/spring-framework/"},{"title":"[Spring] DI","text":"Dependency Injection (의존성 주입)스프링에서 의존성 주입이란, 말 그대로 필요한 객체를 주입한다는 뜻이다. 좀 더 쉽게 살펴보기 위해 건전지를 넣어야하는 장난감을 예제로 들어보자. 장난감이 작동하기 위해서는 배터리가 필수다. 다시 말해 장난감이 배터리에 의존하기 때문에 배터리를 장난감에 주입해야 한다. 먼저 건전지를 분리할 수 없는 배터리 일체형 장난감을 생각해보자. 123456789public class ElectricToyCar { private Battery battery; public ElectricToyCar() { battery = new Battery(); //공장에서 장난감을 만들 때 배터리를 주입한 상태로 만든다! }} 위의 코드와 같이 배터리 일체형 장난감은 생성자에서 배터리를 주입하게 되고, 이외에는 배터리를 주입할 수 있는 방법이 없다. 반대로 건전지를 분리할 수 있는 분리형 장난감을 생각해보자. 1234567891011121314public class ElectricToyRadio { private Battery battery; public ElectricToyRadio(Battery battery) { this.battery = battery; //공장에서 장난감을 만들 때 기본적으로 배터리를 하나 넣어줌 } public void setBattery(Battery battery) { this.battery = battery; //생성 후 setter를 통해서 배터리 주입 가능! }} 위와 같이 배터리 분리형은 배터리가 다 떨어졌을 때 배터리만 따로 교체하면 된다. 이렇게 필요한 객체를 주입하는 것을 DI, 의존성 주입이라고 한다. 스프링에서 DI 설정 방법 생성자를 이용한 DI123public StudentRegisterService(StudentDao studentDao) { this.studentDao = studentDao; } &lt;constructor-arg ref=\"BEAN NAME\"/&gt; tag로 생성자에 다른 bean을 refer하게 만든다. 1234&lt;bean id= \"studentDao\" class = \"ems.member.dao.StudentDao\" &gt;&lt;/bean&gt;&lt;bean id= \"registerService\" class = \"ems.member.service.StudentRegisterService\"&gt; &lt;constructor-arg ref= \"studentDao\" &gt;&lt;/constructor-arg&gt;&lt;/bean&gt; construct-arg : 생성자 ref: 주입할 객체 아이디 setter를 이용한 DI1234567891011public void setJdbcUrl(String jdbcUrl) { this.jdbcUrl = jdbcUrl; } public void setUserId(String userId) { this.userId = userId; }public void setUserPw(String userPw) { this.userPw = userPw; } &lt;property&gt; tag의 name과 value를 통해 특정 setter를 지정해서 사용한다. 1234&lt;bean id= \"dataBaseConnectionInfoDev\" class = \"ems.member.DataBaseConnectionInfo\" &gt; &lt;property name= \"jdbcUrl\" value = \"jdbc:oracle:thin:@localhost:1521:xe\" /&gt; &lt;property name= \"userId\" value = \"scott\" /&gt; &lt;property name= \"userPw\" value = \"tiger\" /&gt; &lt;/bean&gt; name: setter에서 쓰는 이름 가져오기 (소문자로 시작!) value: 파라미터로 들어오는 값 적어주기 List타입의 DI123public void setDevelopers(List&lt;String&gt; developers) { this.developers = developers; } &lt;list&gt; tag를 통해 값들을 지정해준다.123456789&lt;property name= \"developers\" &gt; &lt;list&gt; &lt;value&gt;Cheney.&lt;/value&gt; &lt;value&gt;Eloy.&lt;/value&gt; &lt;value&gt;Jasper.&lt;/value&gt; &lt;value&gt;Dillon.&lt;/value&gt; &lt;value&gt;Kian.&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; value: list 안에 들어있는 값 Map타입의 DI123public void setAdministrators(Map&lt;String, String&gt; administrators) { this.administrators = administrators; } &lt;map&gt; –&gt; &lt;entry&gt; –&gt; &lt;key&gt; tag를 통해 값들을 지정해준다.12345678910111213141516&lt;property name= \"administrators\" &gt; &lt;map&gt; &lt;entry&gt; &lt;key&gt; &lt;value&gt;Cheney&lt;/value&gt; &lt;/key&gt; &lt;value&gt;cheney@springPjt.org&lt;/value&gt; &lt;/entry&gt; &lt;entry&gt; &lt;key&gt; &lt;value&gt;Jasper&lt;/value&gt; &lt;/key&gt; &lt;value&gt;jasper@springPjt.org&lt;/value&gt; &lt;/entry&gt; &lt;/map&gt; &lt;/property&gt; Reference[인프런] 자바 스프링 프레임워크 강의 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/03/20/spring-di/"},{"title":"[SWEA] 파이썬 SW 문제해결 기본: List1","text":"[문제링크] 파이썬 SW 문제해결 기본 - LIST1 [4828] min max접근 방법내장 함수인 min, max를 사용하지 않고 직접 구현해서 최소와 최대값을 구하려고 했다. 참고로 임의의 최대값과 최소값은 각각 2147000000와 -2147000000으로 설정했다. 일반적인 int형 변수의 최대값이 대략 2147000000이기 때문이다. 앞으로도 min값과 max값을 임의로 줘야하는 일이 있다면 이 숫자를 사용하려고 한다. mini = 2147000000 maxi = -2147000000 리스트의 내용물을 하나씩 확인한다 (for문) 만약 현재 값이 mini보다 작다면 mini 값을 갱신 만약 현재 값이 maxi보다 크다면 maxi 값을 갱신 min max123456789101112131415161718192021222324252627282930313233343536# min과 max를 찾아서 그 두개의 차를 돌려주는 함수def findMinMax(arr): # 아주! 큰 수와 아주! 작은 수를 최대, 최소값을 담을 변수에 넣는다 mini = 2147000000 maxi = -2147000000 # 입력받은 리스트의 모든 요소를 첫번째부터 마지막까지 하나씩 확인할거다 for num in arr: # 만약 현재 요소가 위에서 설정한 mini보다 작다면 mini의 값을 현재 요소로 바꿔준다 if num &lt; mini: mini = num # 만약 현재 요소가 위에서 설정한 maxi보다 크다면 maxi의 값을 현재 요소로 바꿔준다 elif num &gt; maxi: maxi = num # for문이 다 끝나면 maxi와 mini 값이 나온다 # 두 개의 차를 리턴한다 return maxi-miniT = int(input())for tc in range(1, T+1): # 리스트의 크기 N = int(input()) # 각 숫자를 입력받아서 리스트에 넣어준다 numList = list(map(int, input().split())) # 함수로 최대-최소를 구해서 그걸 result에 넣는다 result = findMinMax(numList) # BAAM 답이 나온다 print('#{} {}'.format(tc, result)) [4831] 전기버스&lt;접근 방법&gt; K 길이의 구간에 대해서 시작(start)과 끝(end)을 먼저 정한다. 끝은 당연히 시작 위치+K다. 끝 위치에 정류장이 있는지 확인하고, 없으면 끝 위치부터 한 칸 앞으로(왼쪽으로) 이동한다. 만약 끝이 앞쪽으로 이동하다가 시작 위치에 다다를 때까지 정류장이 없으면 그 길은 못 가는 길이다. 정류장이 있다면, 충전소 갯수를 카운트 해주고 새로운 시작과 끝 위치를 정한다. 전기버스12345678910111213141516171819202122232425262728293031323334353637383940414243444546T = int(input())for tc in range(1, T+1): # K, N, M을 각자 매핑해서 받는다 K, N, M = map(int, input().split()) # 우선 정류장 위치를 임시 tmp 리스트에 받아두고 tmp = list(map(int, input().split())) # 0 ~ N+1까지 있는 빈 리스트를 만들고 # 정류장 위치를 1로 표시해준다 # ex) [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0] &lt;= 정류장 1, 3, 5, 7, 9 stations = [0]*(N+1) for i in tmp: stations[i] = 1 # print(stations) # 시작위치와 끝 위치를 정해준다 start = 0 end = start + K #끝 위치는 시작+K번째 인덱스가 될 거임 cnt = 0 # 충전횟수를 셀 변수 # 먼저 끝 위치를 확인한다 #정류장의 끝 위치(stations[end])에 정류장이.. # - 있다! =&gt; 충전 + 1, 시작위치 = 현재 끝위치, 끝 위치 다시 시작 +K 로 갱신해줌 # - 없다! =&gt; 끝 위치 - 1 while start &lt; end and end &lt;N: if stations[end] == 1: cnt += 1 start = end end = start+K else: end -= 1 # while문이 끝났는데 end랑 start랑 같다면? # 이러면 start ~ end 구간 내에 정류장이 없어서 충전을 못한거다 # =&gt; 정류장을 못찾아서 end-1 하면서 찾아도 못 찾은 것 # 결론: 구간내 가능한 정류소 없음: cnt = 0 if end == start: cnt = 0 print('#{} {}'.format(tc, cnt)) [4834] 숫자 카드&lt;접근 방법&gt; 특정 카드가 몇개 있는지 알아내기 위해 딕셔너리를 사용한다. 딕셔너리의 key 값에 이미 있는 카드일 때: 해당 key의 value를 꺼낸 후, 거기에 +1을 해준다. 새로운 value를 다시 key에 넣어준다. 딕셔너리에 없는 key일 때: value를 1로 해서 넣어준다. 숫자카드12345678910111213141516171819202122232425262728293031323334T = int(input())for tc in range(1, T+1): N = int(input()) # 카드 리스트를 입력받는다 cards = list(map(int, input())) # 딕셔너리를 만든다 cDict = dict() for card in cards: # 만약 딕셔너리에 카드번호가 있으면 get해서 +1해서 value에 넣어주고 if card in cDict.keys(): val = cDict.get(card) cDict[card] = val + 1 # 딕셔너리 키에 없는 카드번호면 그냥 value에 1을 넣어준다 else: cDict[card] = 1 # 딕셔너리의 value 중 가장 큰 걸 찾아서 key랑 value를 출력한다! # - 만약 큰 값이 다 똑같으면 더 큰 key를 출력한다! maxi = 0 key = 0 for k, v in cDict.items(): if v &gt; maxi: key = k maxi = v elif v == maxi: if k &gt; key: key = k print('#{} {} {}'.format(tc, key, maxi)) [4835] 구간합&lt;접근 방법&gt; 리스트에 대해서 M개씩 합을 구한다. 합들을 따로 모아둔다. 모아둔 합 중에서 최댓값과 최솟값을 찾아서 차이를 알아낸다. 구간합123456789101112131415161718192021222324252627T = int(input())for tc in range(1, T+1): N, M = map(int, input().split()) numList = list(map(int, input().split())) # 합들을 담을 리스트 sums = [] # N-M+1 만큼 for문을 돌린다는 것: # [1, 2, 3, 4]에서 2개씩 합을 구한다고 하면 # 1+2, 2+3, 3+4 이렇게 3개가 나올 수 있다. # 그럼 1,2,3,4 중에서 1, 2, 3까지만 for문이 돌게 된다. # 즉, 4-2+1 번 for문이 도는 것! == N-M+1 for i in range(N-M+1): tmp = 0 # i번째부터 M개를 다 tmp에 더해준다 for j in range(M): tmp += numList[i+j] # 합 리스트에 tmp 값을 넣어준다! sums.append(tmp) # 각각 min max구하기보다 그냥 정렬해서 맨 뒤에꺼에서 맨 앞에꺼를 빼주면 된다 sums = sorted(sums) print('#{} {}'.format(tc, sums[len(sums)-1] - sums[0])) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/10/14/swea-ps-basic-list1/"},{"title":"[SWEA] 파이썬 SW 문제해결 기본: List2","text":"[문제링크] 파이썬 SW 문제해결 기본 - LIST2 [4836] 색칠하기접근 방법 먼저 10*10 보드판 생성 p1(왼쪽위), p2(오른쪽아래) 좌표 값 받기 가로: p1[0] ~ p2[0] 세로: p1[0] ~ p2[1] 가로 세로 가지고 for문으로 색칠할 값을 “더해주기” 겹치는 부분 = 빨강+파랑 = 3 보드판에서 겹치는 영역 카운팅하기 참고로 SWEA에서는 sys 라이브러리를 사용할 수 없다 (sys.stdin.readline() 쓸 수 없음). 제출할 때는 input()로 바꿔서 제출했다. 색칠하기123456789101112131415161718192021222324252627282930313233import sysT = int(sys.stdin.readline())for tc in range(1, T+1): # 보드판 입력받기 (0 ~ 9까지) board = [[0]*10 for _ in range(10)] # 색칠 몇개 할건지 입력받기 N = int(sys.stdin.readline()) for i in range(N): # 색칠할 영역 정보를 먼저 리스트로 받는다 tmp = list(map(int, sys.stdin.readline().split())) p1 = (tmp[0], tmp[1]) #왼쪽 위 좌표 p2 = (tmp[2], tmp[3]) #오른쪽 아래 좌표 color = tmp[4] #색칠할 색상 값 # p2[0]을 포함한 영역까지 칠해야하니 +1 for row in range(p1[0], p2[0]+1): for col in range(p1[1], p2[1]+1): # 보드의 해당 위치에 색상으로 더!해!줌 (대체 ㄴㄴ) board[row][col] += color cnt = 0 # 겹치는 영역을 셀 변수 cnt # 보드판을 돌면서 값이 3인 부분이 있으면 cnt+1 for row in range(10): for col in range(10): if board[row][col] == 3: cnt += 1 print('#{} {}'.format(tc, cnt)) [4843] 특별한 정렬접근 방법 주어진 리스트를 정렬한다 (큰거 - 작은거) 결과 리스트에 맨앞, 맨뒤 순서로 넣는다 i번째, N-1-i번째 for문은 5까지만 해도 됨(어짜피 10개만 출력함) 결과리스트 출력하기 특별한 정렬12345678910111213141516171819T = int(input())for tc in range(1, T+1): N = int(input()) numList = list(map(int, input().split())) # 큰거 ~ 작은거 순으로 정렬하기 numList = sorted(numList, reverse=True) # 결과 담을 리스트 result = [] # 어짜피 10개만 출력하니까 5번째 인덱스까지만 돌린다 for i in range(5): result.append(numList[i]) result.append(numList[N-1-i]) print('#{}'.format(tc), end=' ') print(*result) [4837] 부분집합의 합접근 방법 부분집합을 빠르게 구한다 (비트연산자로 부분집합 구하기) 만약 현재 부분집합의 갯수가 N, 합이 K면 cnt+1 부분집합의 합123456789101112131415161718192021T = int(input())for tc in range(1, T+1): # 1 ~ 12까지 있는 리스트 A = list(range(1, 13)) N, K = map(int, input().split()) cnt = 0 for i in range(1 &lt;&lt; len(A)): # 부분집합의 케이스 마다 empty list 생성 currentSet = [] for j in range(len(A)): if i &amp; (1 &lt;&lt; j): currentSet.append(A[j]) # 현재 부분집합의 길이가 N과 같고 합이 K랑 같다면 우리가 찾는 부분집합! if len(currentSet) == N and sum(currentSet) == K: cnt += 1 print('#{} {}'.format(tc, cnt)) [4837] 부분집합의 합접근 방법 시작, 끝, 목표가 주어진다 시작+끝//2 : mid mid가 목표보다 크면 시작위치를 mid로 조정한다 (끝은 그대로 둠) mid가 목표보다 작으면 끝 위치를 mid로 조정한다 목표를 찾기까지 시작/끝 위치를 조정한 횟수를 리턴한다 이진탐색1234567891011121314151617181920212223242526272829def binarySearch(start, end, goal): cnt = 0 while start &lt; end: mid = (start+end)//2 if goal &gt; mid: start = mid cnt += 1 elif goal &lt; mid: end = mid cnt += 1 else: return cntT = int(input())for tc in range(1, T+1): # 전체페이지, A의 목표, B의 목표가 주어진다 P, A, B = map(int, input().split()) # 책은 1페이지부터 시작하니 1부터 시작한다 a, b = binarySearch(1, P, A), binarySearch(1, P, B) # print(a, b) if a &lt; b: print('#{} A'.format(tc)) elif a &gt; b: print('#{} B'.format(tc)) else: print('#{} 0'.format(tc)) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/10/20/swea-ps-basic-list2/"},{"title":"[SWEA] 파이썬 SW 문제해결 기본: String","text":"[문제링크] 파이썬 SW 문제해결 기본 - String [4864] 문자열 비교접근 방법str2안에 str1이 있는지 확인한다..! 문자열 비교12345678910T = int(input())for tc in range(1, T+1): str1 = input() str2 = input() if str1 in str2: print('#{} 1'.format(tc)) else: print('#{} 0'.format(tc)) [4861] 회문접근 방법 주어진 문자열들을 입력받는다. (가로) 입력 받은 문자열 중 회문이 있는지 확인한다. 만약 이 단계에서 가로 회문이 찾아진다면 바로 끝내면 된다. 가로에서 못찾았다면 세로 회문을 찾는 함수를 돌린다. (세로) 고정된 index값과 M만큼 증가하는 row를 기준으로 세로값들을 임시 배열에 저장한다. 만약 현재의 임시배열이 회문이면 끝낸다. (아니라면 반복) 회문1234567891011121314151617181920212223242526272829303132333435363738394041424344# 세로로 된 회문을 찾는 함수def findVertical(): for i in range(N-M+1): # 임시 리스트 생성 tmp = [] for j in range(N): for k in range(M): tmp.append(board[k+i][j]) # 만약 리스트의 현재 길이가 M이고 회문이라면 종료 if len(tmp) == M and tmp == tmp[::-1]: return tmp # if문에서 종료하지 않았다면 임시 리스트를 비워준다 tmp.clear()T = int(input())for tc in range(1, T+1): N, M = map(int, input().split()) board = [] isDone = False for _ in range(N): #board에 넣기 전 잠시 임시변수에 문자열을 담아둔다 tmp = list(map(str, input())) # 만약 가로 회문이 존재한다면 바로 끝낸다. for i in range(N-M+1): if tmp[i:] == tmp[i:][::-1]: print('#{}'.format(tc), end=' ') print(*tmp[i:], sep='') # for문을 끝내기 위한 flag변수 isDone = True # 가로회문이 존재하지 않아 종료되지 않았다면 세로 변수를 찾아야하니 board에 넣어준다 else: board.append(tmp) # 가로 통과 못했을 때만 세로 확인 if isDone == False: vertical = findVertical() print('#{}'.format(tc), end=' ') print(*vertical, sep='') [4865] 글자수접근 방법 str1을 set으로 받는다 (중복제거) str1애들로 딕셔너리를 만든다 str1의 각 요소에 대해서 str2에 몇개씩 있는지 카운트 후 딕셔너리에 추가한다 딕셔너리의 value중 가장 큰 값을 출력한다 글자수1234567891011121314151617181920T = int(input())for tc in range(1, T+1): #중복 제거를 위해 set으로 받는다 str1 = set(input()) str2 = input() # 중복된 요소를 셀 dictionary countAlpha = {} for alphabet in str2: if alphabet in str1: # 이미 있는 key라면 value+1을 해준다 if alphabet in countAlpha.keys(): value = countAlpha.get(alphabet) countAlpha[alphabet] = value+1 # 없는 key는 value에 1을 넣어준다 else: countAlpha[alphabet] = 1 print('#{} {}'.format(tc, max(countAlpha.values()))) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/10/20/swea-ps-basic-string/"},{"title":"[SWEA] 1284. 수도 요금 경쟁 with Python","text":"1284. 수도 요금 경쟁 1284. 수도 요금 경쟁123456789101112131415T = int(input())# tc만큰 for문 돌리기for tc in range(1, T+1): # 각 input을 map으로 받는다 P, Q, R, S, W = map(int, input().split()) # A = 사용량 * P원 A = W*P # B = R리터 보다 사용량이 적으면 Q원, R리터 보다 사용량이 높으면 Q원 + 초과량*S B = Q if W&lt;R else Q+(W-R)*S print(\"#{} {}\".format(tc, A if A&lt;B else B)) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/08/11/swea-python-1284/"},{"title":"[SWEA] 1204. 최빈수 구하기 with Python","text":"1204. [S/W 문제해결 기본] 1일차 - 최빈수 구하기 1204.최빈수 구하기123456789101112131415161718192021222324252627282930# test case의 횟수만큼 for문을 돌림for i in range(T): # test case 번호 입력받음 n = int(input()) # 점수들 list에 넣음 scores = list(map(int, input().split())) # 가장 많이 나오는 점수를 저장하기 위한 변수 max = 0 # 입력되는 점수의 갯수는 1000개인데 점수의 범위는 0~100이니까 0~100으로 for문을 돌리는게 더 효율적일 것 같았음 for score in range(101): # 특정 점수가 리스트에 없을 때 if scores.count(score) == 0: continue # 그냥 다음 점수로 넘어가자 # 특정 점수가 #개 있고, 그게 현재 최빈수보다 크면 keep elif scores.count(score) &gt; scores.count(max): max = score # 특정 점수가 #개 있는데 현재 최빈수의 갯수랑 똑같으면 더 큰 점수를 keep elif scores.count(score) == scores.count(max): if score&gt;max: max = score # 최빈수 출력 print(f\"#{n} {max}\") document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/07/31/swea-python-1204/"},{"title":"[SWEA] 1288. 새로운 불면증 치료법 with Python","text":"1288. 새로운 불면증 치료법 1288. 새로운 불면증 치료법1234567891011121314151617181920212223242526272829303132333435363738T = int(input())for tc in range(1, T+1): # 1) N을 일단 스트링으로 받는다 =&gt; for문 돌리려면 N은 스트링이어야함 N = input() # 2) 0~9까지 확인할 배열 생성 arr = [0 for _ in range(10)] # 3) N은 문자열이니까 계산용 int N을 만들어둔다 intN = int(N) # 4) count는 몇번 양을 세는지 확인할 변수 count = 1 # 5) 0 ~ 9 사이의 숫자가 나타나지 않았다면 = 아직 배열에 0이 있다면 while 0 in arr: # 6) 문자열 N을 가지고 for문을 돌린다 for i in N: if arr[int(i)] &gt; 0: # 만약 이미 나왔다면 그냥 다음걸로 넘어가고 continue else: #아직 안나왔으면 그 숫자 위치에 1 더해주기 arr[int(i)] += 1 # 7) 아직 안끝났다면 count에 1을 더해준다 count += 1 # 8) 그리고 따로 만든 정수N이랑 count를 곱한 후, # for문 돌리기 쉽게 그걸 다시 문자열로 만든다 N = str(intN * count) # 9) while이 끝났으면 마지막 count += 1이 먹힌채로 끝났을 것이다. # 그래서 1을 빼줘야함 count -= 1 # 끝 print('#{} {}'.format(tc, intN*count)) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/08/25/swea-python-1288/"},{"title":"[SWEA] 1859. 백만 장자 프로젝트 with Python","text":"1859. 백만 장자 프로젝트 접근 방법 맨 마지막 날은 어쨌든 팔아야하니까 keep한다 (sellingPrice) N-2번째부터 뒤로 for문을 돌린다 (방금 N-1은 keep 했으니까) 하나씩 이동하면서 만약 현재 값이 sellingPrice 보다 작으면 (-현재 값) + sellingPrice를 result에 더해준다 만약 현재 값이 sellingPrice보다 크면 그 값으로 sellingPrice를 갱신해준다 1859. 백만 장자 프로젝트12345678910111213141516T = int(input())for tc in range(1, T+1): N = int(input()) prices = list(map(int, input().split())) sellingPrice = prices[N-1] result = 0 for i in range(N-2, -1, -1): if prices[i] &gt; sellingPrice: sellingPrice = prices[i] else: result += -prices[i] + sellingPrice print('#{} {}'.format(tc, result)) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/10/21/swea-python-1859/"},{"title":"[SWEA] 1926. 간단한 369 게임 with Python","text":"1926. 간단한 369게임 접근 방법 1 ~ N까지 str형태로 리스트를 만든다 현재 값에 3, 6, 9가 포함되어있다면: 현재 값에서 3, 6, 9의 갯수를 카운트 ‘-‘ *갯수 출력 369 아니면 그냥 출력 1926. 간단한 369 게임123456789101112131415N = int(input())nList = [str(i) for i in range(1, N+1)]for num in nList: cnt = 0 if '3' in num: cnt += num.count('3') if '6' in num: cnt += num.count('6') if '9' in num: cnt += num.count('9') if cnt &gt; 0: print('-'*cnt, end=' ') else: print(num, end=' ') document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/10/22/swea-python-1926/"},{"title":"[SWEA] 1940. 가랏! RC카! with Python","text":"1940. 가랏! RC카! 이해하느라 오조오억년 걸린 문제…😿 접근 방법 a, b가 있으면 a가 command고 b가 속도 였다ㅠ speed = 0에서 시작하는 기존 속도 a가 1일 때(가속) speed + b 2일 때(감속) speed가 b보다 작으면 speed = 0 아니면 speed - b if가 다 끝난 후 전체 거리에 speed를 더해준다 1940123456789101112131415161718192021222324T = int(input())for tc in range(1, T+1): N = int(input()) total = 0 speed = 0 for i in range(N): commands = list(map(int, input().split())) # 가속일 때 if commands[0] == 1: speed += commands[1] # 감속일 때 elif commands[0] == 2: if speed &lt; commands[1]: speed = 0 else: speed -= commands[1] total += speed print('#{} {}'.format(tc, total)) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/11/17/swea-python-1940/"}],"tags":[{"name":"Git","slug":"git","link":"/tags/git/"},{"name":"GitHub","slug":"github","link":"/tags/github/"},{"name":"Life","slug":"life","link":"/tags/life/"},{"name":"Blog","slug":"blog","link":"/tags/blog/"},{"name":"Hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"TIL","slug":"til","link":"/tags/til/"},{"name":"Java","slug":"java","link":"/tags/java/"},{"name":"Data Structure","slug":"data-structure","link":"/tags/data-structure/"},{"name":"Spring","slug":"spring","link":"/tags/spring/"},{"name":"Python","slug":"python","link":"/tags/python/"},{"name":"Algorithm","slug":"algorithm","link":"/tags/algorithm/"}],"categories":[{"name":"GitHub","slug":"github","link":"/categories/github/"},{"name":"Life","slug":"life","link":"/categories/life/"},{"name":"Java","slug":"java","link":"/categories/java/"},{"name":"Python","slug":"python","link":"/categories/python/"},{"name":"Data Structure","slug":"java/data-structure","link":"/categories/java/data-structure/"},{"name":"Spring","slug":"java/spring","link":"/categories/java/spring/"},{"name":"SWEA","slug":"python/swea","link":"/categories/python/swea/"},{"name":"Algorithm","slug":"python/algorithm","link":"/categories/python/algorithm/"}]}